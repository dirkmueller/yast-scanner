#!/usr/bin/perl
#
# ag_sane
# This script is part of the YaST2 Scanner installation module
# Copyright SuSE Gmbh - 2001
# 
# Author: Klaas Freitag <freitag@suse.de>
#
# $Id$
#

BEGIN { unshift @INC, "/usr/lib/YaST2/agents_non_y2/" ;
	unshift @INC, "/usr/lib/YaST2/servers_non_y2/" ; }

use ycp;
use strict;

use scannerDB;

# ##############################################################################
# 
# ag_sane offers the following actions, selected by the calling 'path' in ycp,
# which is mapped to the perl var $action in this script.
# 
# driver
# ======
# 
# Required parameter: bus, vendor, model.
# 
# Action driver delivers the correct driver for a scanner identified by the bus
# the scanner is connected to, the model and the vendor.
# 
# The return-value is a string containing the driver name or an empty string on 
# error.
# Bus 'net' is not supported.
# 
# 
# modellist
# =========
# 
# Required parameter: bus, vendor
# 
# modellist returns a sorted list of models of a vendor for a bus. If the vendor
# is an empty string, the 'generic' vendor is assumed and a list of all available
# drivers is returned. 
# Bus 'net' is not supported.
# 
# vendorlist
# ==========
# 
# Required parameters: bus
# 
# returns a list of all vendors for which models/drivers on the bus exist. 
# Bus 'net' is not supported.
# 
# writeconfig
# ===========
# 
# Required parameter: driver, vendor, device, bus
# 
# adds one backend to the system wide driver list for sane in /etc/sane.d/dll.conf
# and writes the individual config file in /etc/sane.d/{backend}.conf
# 
# returns a ycp boolean
# 
# scanimage
# =========
# 
# Required Parameter: driver, devicefile, host in case of network scanner
# 
# Scans a test image and returns the filename where the image is saved.
# The file format of the image is pnm.
# 
# netscannerinfo
# ==============
#
# Required Parameter: bus(=net), host
#
# returns a map with scanner data of the remote scanner (does not really work 
# yet, returns dummy data) 
# 
# ##############################################################################



while ( <STDIN> )
{
    ycpDoVerboseLog();
    ycpInit( $_ );

    if( /result/i )
    {
	y2debug("got result -> say goodby!" );
	exit(0);
    }

    my $action = ycpGetPath();

    y2debug( " vvv starting in ag_sane with action <$action> vvv" );

    # $action = "driver";  # TEST 
    y2debug( "Got Action = ycpPath = <$action>");

    unless( ycpArgIsMap() )
    {
	y2debug( "Argument seems not to be a Map from ycp" );
    }
    my %scanner = ycpGetArgMap();
    my $vendor = findInHash( "vendor", \%scanner );
    my $bus    = findInHash( "bus", \%scanner  );
    my $model  = findInHash( "device", \%scanner );

    if( $action =~ /driver\s*$/i )
    {
	#
	# This action queries for the correct driver for one scanner
	# identified by its vendor and the model, both values come as
	# parameters.
	y2debug( "Bus is $bus" );
	y2debug( "Model is $model" );
	y2debug( "Vendor is $vendor" );

	my %models = getModel( $bus, $vendor);

	while( my ($model, $driver) = each %models )
	{
	    y2debug( "Use <$driver> for <$model>" );
	}

	my $use_driver = "";
	$use_driver = findInHash( $model, \%models );

	y2debug( "Returning <$use_driver>" );

	ycpReturnSkalarAsString( $use_driver );

	# my $retdriver = $driver;
    }
    elsif( $action =~ /modellist\s*$/ )
    {
	# Only the vendor and the bus must be set in the incoming parameter hash -
	# returning a list of available drivers.
	y2debug( "Handling action modellist" );

	if( !defined $vendor || $vendor =~ /^\s+$/  )
	{
	    y2debug("Vendor string is empty -> assume 'generic'" );
	    $vendor = "generic";
	}
	my %models = getModel( $bus, $vendor);

	my @drivers;

	@drivers = sort keys %models;
	
	ycpReturn( \@drivers );
    }
    elsif( $action =~ /vendorlist/ )
    {
	y2debug( "Handling action vendorlist" );
	# Only the bus is required. Return a list of vendors for the list.
	my @vlist = getVendorList( findInHash( "bus", \%scanner )); 
	ycpReturn( \@vlist );
    }
    elsif( $action =~ /writeconfig/ )
    {
	y2debug( "Handling action writeconfig" );
	my @cfg_backends = readDllconf( );
	my $ok = 0;
	
	if( $bus =~ /net/i )
	{
	    my $host = findInHash( "host", \%scanner );
	    y2debug( "Installing a net scanner on host <$host> !" );

	    my @already_conf = readNetConf();

	    unless( grep( /$host/i, @already_conf ))
	    {
		push @already_conf, $host;
	    }
	    writeNetConf( \@already_conf );
	    
	    # Add net to dll.conf
	    $ok = 1;
	    unless( grep ( /net/i, @cfg_backends ))
	    {
		push @cfg_backends, "net";
		$ok = writeDllconf( \@cfg_backends );
	    }
	    # ATTENTION: Return here :(
	    ycpReturnSkalarAsBoolean( $ok );
	}


	# Not net !
	my $driver = findInHash( "driver", \%scanner );
	my $devicefile = findInHash( "dev_name", \%scanner );
	y2debug( "Installing driver <$driver> for scanner <$vendor/$model>" );

	if( grep( /$driver/, @cfg_backends ) )
	{
	    y2debug( "Backend <$driver> is already configured!" );
	    $ok = 1;
	}
	else
	{
	    y2debug( "Backend <$driver> is not configured, adding it" );
	    push @cfg_backends, $driver;

	    $ok = writeDllconf( \@cfg_backends );
	}
	
	# now the scanner conf:
	$ok = $ok && writeIndividualConf( $bus, $driver, $devicefile );

	# valid are:
	# vendor-bus-model
	ycpReturnSkalarAsBoolean( $ok );
    }
    elsif( $action =~ /scanimage/ )
    {
	y2debug( "Handling action scanimage" );
	my $devicefile = findInHash( "dev_name", \%scanner );
	my $driver = findInHash( "driver", \%scanner );

	my $devstring = sprintf( "%s:%s", lc $driver, $devicefile );

	if( $bus =~ /net/i )
	{
	    my $host = findInHash( "host", \%scanner );
	    if(defined $host)  {
		$devstring = "net:" . $host .":". $devstring;
	    } else {
		y2debug( "ERROR: Tried to scan net, but no host given !" );
		$devstring = undef;
	    }
	}

	my $resFile = "";
	if( defined $devstring ) {
	    $resFile = acquireTestImage( $devstring );
	    
	    y2debug( "Acquired image to result-file <$resFile>" );
	}

	ycpReturnSkalarAsString( $resFile );
	
    }
    elsif( $action =~ /netscannerinfo/i )
    {
	y2debug( "Handling action netscannerinfo" );
	unless ( $bus =~ /net/i )
	{
	    y2debug( "bus is not net !" );
	}
	my $host = findInHash( "host", \%scanner );

	my %result = ( bus => "Net", 
		       class_id => "",
		       device => "Umax  Test test",
		       device_id => "",
		       resource =>"",
		       rev => "",
		       sub_class_id => "",
		       sub_device => "",
		       sub_vendor => "Umax",
		       unique_key => "",
		       vendor => "Umax",
		       vendor_id => "",
		       dev_name => "/dev/scanner",
		       class => "scanner",
		       driver => "net",
		       host => $host );
	ycpReturn( \%result );
    }
    else
    {
	y2debug( "Unknown action <$action>" );
    }
}

