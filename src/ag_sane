#!/usr/bin/perl
#
# ag_sane
# This script is part of the YaST2 Scanner installation module
# Copyright SuSE Gmbh - 2001
# 
# Author: Klaas Freitag <freitag@suse.de>
#
# $Id$
#

BEGIN { unshift @INC, "/usr/lib/YaST2/agents_non_y2/" ;
	unshift @INC, "/usr/lib/YaST2/servers_non_y2/" ; }

use ycp;
use strict;

use scannerDB;



# ##############################################################################



while ( <STDIN> )
{
    ycpDoVerboseLog();
    ycpInit( $_ );

    if( /result/i )
    {
	y2debug("got result -> say goodby!" );
	exit(0);
    }

    my $action = ycpGetPath();
    y2debug( " vvv starting in ag_sane with action <$action> vvv" );

    # $action = "driver";  # TEST 
    y2debug( "Got Action = ycpPath = <$action>");

    unless( ycpArgIsMap() )
    {
	y2debug( "Argument seems not to be a Map from ycp" );
    }
    my %scanner = ycpGetArgMap();

    if( $action =~ /driver\s*$/i )
    {
	#
	# This action queries for the correct driver for one scanner
	# identified by its vendor and the model, both values come as
	# parameters.

	my $vendor = findInHash( "vendor", \%scanner );
	my $bus = findInHash( "bus", \%scanner  );
	my $model = findInHash( "device", \%scanner );

	y2debug( "Bus is $bus" );
	y2debug( "Model is $model" );
	y2debug( "Vendor is $vendor" );

	my %models = getModel( $bus, $vendor);

	while( my ($model, $driver) = each %models )
	{
	    y2debug( "Use <$driver> for <$model>" );
	}

	my $use_driver = "";
	$use_driver = findInHash( $model, \%models );

	y2debug( "Returning <$use_driver>" );

	ycpReturnSkalarAsString( $use_driver );

	# my $retdriver = $driver;
    }
    elsif( $action =~ /driverlist\s*$/ )
    {
	# Only the vendor and the bus must be set in the incoming parameter hash -
	# returning a list of available drivers.
	y2debug( "Handling action driverlist" );
	my $vendor = findInHash( "vendor", \%scanner );
	my $bus = findInHash( "bus", \%scanner  );

	if( !defined $vendor || $vendor =~ /^\s+$/  )
	{
	    y2debug("Vendor string is empty -> assume 'generic'" );
	    $vendor = "generic";
	}
	my %models = getModel( $bus, $vendor);

	my @drivers;
	# while( my ($model, $driver) = each %models )
	# {
	#     my %p;
	#     $p{ model => $model, driver => $driver };
	#     push @drivers, \%p;
	#     y2debug( "Use <$driver> for <$model>" );
	# }
	@drivers = sort keys %models;
	
	ycpReturn( \@drivers );
    }
    elsif( $action =~ /vendorlist/ )
    {
	y2debug( "Handling action vendorlist" );
	# Only the bus is required. Return a list of vendors for the list.
	my @vlist = getVendorList( findInHash( "bus", \%scanner )); 
	ycpReturn( \@vlist );
    }
    else
    {
	y2debug( "Unknown action <$action>" );
    }
}

