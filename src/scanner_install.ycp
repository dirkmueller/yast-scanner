/**
 * File:
 *   scanner_install.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/27
 *
 * $Id$
 *
 * Installation of the scanner.
 * 
 *
 */

{
  textdomain "scanner";
  include "ui/summary.ycp";
  
/**
 * ScannerInstallDialog
 */

  global define ScannerInstallDialog_UI( map installed_scanner, byteblock image ) ``{

      string scanner = "";
      string info = "";
      string label = "";
      
      if ( lookup( installed_scanner, "bus", "" ) == "Net" )
      {
	  list net_scanner = lookup(installed_scanner, "device", []);
	  integer n = 1;
	  foreach ( `product, net_scanner, ``{
	      scanner = scanner + lookup( product, "device", "" );
	      if ( n < size(net_scanner) )
	      {
		  scanner = scanner + ",  ";
	      }
	      n = n+1;
	  });
	  info = lookup(installed_scanner, "host", "");
	  
	  // This is the label of an outfield showing the IP address of the scanstation, e.g.
	  // the dailog looks like that:
	  // The scanner
	  //   UMAX 12-g
	  // is connected to
	  //  10.10.100.142
	  label = _("is connected to");
      }
      else
      {
	  // This is the label of an outfield showing the device file, e.g.
	  // the dailog looks like that:
	  // The scanner
	  //   UMAX 12-g
	  // was installed on
	  //  /dev/sg0
	  label = _("was installed on");
	  scanner = lookup( installed_scanner, "vendor", "" ) + " - " + lookup(installed_scanner, "device", "" );
	  info = lookup(installed_scanner, "dev_name", "");
      }
	   
	  

      term contents = `VBox (
			     `Left(`Label (`opt (`hstretch), _("The scanner"))),
			     `VSpacing(0.3),
			     `HBox (`HSpacing(2.5),
				    `HWeight(5, `Label (`opt (`outputField, `hstretch), scanner)),
				    `HWeight(1, `Empty())
				    ),
			     `VSpacing(0.5),
			     `Left(`Label (`opt (`hstretch), label)),
			     `VSpacing(0.3),
			     `HBox (`HSpacing(2.5),
				    `HWeight(5, `Label (`opt (`outputField, `hstretch),
							info )),
				    `HWeight(1, `Empty())
				    ),
			     `VSpacing (1),
			     `HBox (
				    `ReplacePoint(`id(`replace),`Image( image, _("Test picture")) ),
				    `PushButton (`id (`test), _("&Test")),
				    `HSpacing (1.0)
				    ),
			     `VSpacing (3.0)
			     );

      return contents;
  }

/**
 * ScannerInstallDialog
 */
  global define ScannerInstallDialog()``{
      string help    = "";
      
      // help part 1 of dialog scanner test
      string help1    = _("<p>Your new scanner was installed
successfully.</p>");
      // help part 2 of dialog scanner test
      string help2    = _("<p>You can test the scanner now.
Insert a test page and click on the <b>Test</b> button.
Press <b>Next</b> to finish the installation.</p>");
      // help part 3 of dialog scanner test
      string help3    = _("<p>The program <b>xscanimage</b>
from package <i>sane</i> (already installed) provides
basic functionality for scanning.</p>");
      // help part 4 of dialog scanner test
      string help4 = _("<p><b>xsane</b>
(requires installation of the package <i>xsane</i>)
offers more scan- and image processing functionality.
The <b>Gimp</b> also provides scan support.</p>");
      
      help = help1 + help2 + help3 + help4;
      
      string caption = _("Scanner Test");

      term contents  = ScannerInstallDialog_UI( GetCurrentScanner(),
						Read( .local.byte, "/usr/lib/YaST2/images/lvm-config.png") );

      UI(`SetWizardContentsButtons(caption,contents,help,BackButtonLabel(),NextButtonLabel()));

      any ret = nil;


       
      repeat {

	  ret = UI(`UserInput());

	  term image = `Empty();

	  if ( ret == `test || ret == `next )
	  {
	      string filename = SCR(`Read(.sane.scanimage, GetCurrentScanner()));
	      // get the test picture from SANE
	      byteblock image_data = SCR(`Read(.sane.scanimage, GetCurrentScanner()));
	      image = `Image(  image_data, _("Test picture"));

	      UI( `ReplaceWidget(`id(`replace), image ));
	  }
	  
      } until ( ret == `next || ret == `back || ret == `abort );
      
      return ret;
  }

}
