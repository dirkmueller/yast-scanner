/**
 * File:
 *   scanner_install.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *   Klaas Freitag <freitag@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/27
 *
 * $Id$
 *
 * Installation of the scanner.
 * 
 *
 */

{
  textdomain "scanner";
  
/**
 * ScannerInstallDialog
 */

  global define ScannerInstallDialog_UI( map installed_scanner, byteblock image ) ``{

      string scanner = "";
      string info = "";
      string label = "";
      
      if ( lookup( installed_scanner, "bus", "" ) == "Net" )
      {
	  scanner = lookup(installed_scanner, "device", []);
	  info = lookup(installed_scanner, "host", "");
	  
	  // label of an outfield showing the IP address of the scanstation
	  label = _("Scanstation");
      }
      else
      {
	  // label of an outfield showing the device file, e.g. /dev/sg0
	  label = _("Device");
	  scanner = lookup( installed_scanner, "vendor", "" ) + " - " + lookup(installed_scanner, "device", "" );
	  info = lookup(installed_scanner, "dev_name", "");
      }
	   
	  

      term contents = `HBox (
			     `HWeight(1, `VBox (
						// label of an outpufield
						`Left(`Label (`opt (`hstretch), _("Scanner"))),
						`VSpacing(0.3),
						`HBox (`HSpacing(2.5),
						       `HWeight(10, `Label (`opt (`outputField, `hstretch), scanner)),
						       `HWeight(1, `Empty())
						       ),
						`VSpacing(0.5),
						`Left(`Label (`opt (`hstretch), label)),
						`VSpacing(0.3),
						`HBox (`HSpacing(2.5),
						       `HWeight(10, `Label (`opt (`outputField, `hstretch),
									    info )),
						       `HWeight(1, `Empty())
						       ),
						`VSpacing (1),
						// button label
						`PushButton (`id (`test), _("&Test"))
						)
				      ),
			     `HWeight( 1, `VBox (
						 `VSpacing (2),
						 // label of the image
						 `ReplacePoint(`id(`replace), `Image( image, _("Test picture"))),
						 `VSpacing (2)
						 )
				       ),
			     `HSpacing(2.0)

			     );
      return contents;

  }

/**
 * ScannerInstallDialog
 */
  global define ScannerInstallDialog()``{
      string help    = "";
      
      // help part 1 of dialog scanner test
      string help1    = _("<p>Your new scanner was installed
successfully.</p>");
      // help part 2 of dialog scanner test
      string help2    = _("<p>You can test the scanner now.
Insert a test page and click on the <b>Test</b> button.
Press <b>Next</b> to finish the installation.</p>");
      // TODO: describe the problem with certain Agfa scanners (firmware has to be loaded manually -.
      // do not try to test in that case). 
      // help part 3 of dialog scanner test
      string help3    = _("<p>The program <b>xscanimage</b>
from package <i>sane</i> (already installed) provides
basic functionality for scanning.</p>");
      // help part 4 of dialog scanner test
      string help4 = _("<p>The scan program <b>Kooka</b>
(requires installation of the package <i>kdegraphics3-scan</i>)
offers more scan- and image processing functionality.
The <b>Gimp</b> and <b>xsane</b> also provide scan support.</p>");
      
      help = help1 + help2 + help3 + help4;

      // headline of the test dialog
      string caption = _("Scanner Test");

      term contents  = ScannerInstallDialog_UI( GetCurrentScanner(),
						Read( .local.byte,
						      "/usr/share/doc/packages/sane/sane-backends/umax/sane-logo2.jpg"));

      Wizard::SetContentsButtons(caption,contents,help,BackButtonLabel(),NextButtonLabel());

      // Check if tool convert exists, otherwise do disable test button.
      // -> we do not need this any longer - the `Image widget does all the work 
	  

      any ret = nil;

      repeat {

	  ret = UI::UserInput();

	  term image = `Empty();

	  // TODO ? also do the test when clicking NEXT
	  if ( ret == `test )
	  {
	      // Disable test button while scanning.
	      UI::ChangeWidget(`id(`test), `Enabled, false);
	      map scanner = GetCurrentScanner();
	      string tmpdir = SCR::Read(.target.tmpdir);
	      y2debug("TmpDir is tmpdir %1", tmpdir );

	      scanner = add( scanner, "tmpdir", tmpdir );
	      string filename = SCR::Execute(.sane.scanimage, scanner );
	      if ( filename != "" )
	      {
		  byteblock image_data = Read(.local.byte, filename);
		  image = `Image( `opt(`scaleToFit), image_data, _("Test picture"));

		  UI::ReplaceWidget(`id(`replace), image );
	      }
	      UI::ChangeWidget(`id(`test), `Enabled, true);
	  }
	  
      } until ( ret == `next || ret == `back || ret == `abort || ret == `cancel );


      return ret;
  }

}
