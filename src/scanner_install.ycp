/**
 * File:
 *   scanner_install.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *   Klaas Freitag <freitag@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/27
 *
 * $Id$
 *
 * Installation of the scanner.
 * 
 *
 */

{
    textdomain "scanner";

    import "Label";
  
/**
 * ScannerInstallDialog
 */

    global define term ScannerInstallDialog_UI( map installed_scanner, byteblock image ) ``{

	string scanner = "";
	string info = "";
	string label = "";
      
	if ( lookup( installed_scanner, "bus", "" ) == "Net" )
	{
	    scanner = lookup(installed_scanner, "device", "");
	    info = lookup(installed_scanner, "host", "");
	  
	    // label of an output field showing the IP address of the scanstation
	    label = _("Scanstation");
	}
	else
	{
	    // label of an output field showing the device file, e.g. /dev/sg0
	    label = _("Device");
	    scanner = lookup( installed_scanner, "vendor", "" ) + " - " + lookup(installed_scanner, "device", "" );
	    info = lookup(installed_scanner, "dev_name", "");
	}

	
	term contents = `HBox (
			       `HWeight(1, `VBox (
						  // label of an output field
						  `Left(`Label (`opt (`hstretch), _("Scanner"))),
						  `VSpacing(0.3),
						  `HBox (`HSpacing(2.5),
							 `HWeight(10, `Label (`opt (`outputField, `hstretch), scanner)),
							 `HWeight(1, `Empty())
							 ),
						  `VSpacing(0.5),
						  `Left(`Label (`opt (`hstretch), label)),
						  `VSpacing(0.3),
						  `HBox (`HSpacing(2.5),
							 `HWeight(10, `Label (`opt (`outputField, `hstretch),
									      info )),
							 `HWeight(1, `Empty())
							 ),
						  `VSpacing (1),
						  // button label
						  `PushButton (`id (`test), _("&Test"))
						  )
					),
			       `HWeight( 1, `VBox (
						   `VSpacing (2),
						   // label of the image
						   `ReplacePoint(`id(`replace), `Image( image, _("Test picture"))),
						   `VSpacing (2)
						   )
					 ),
			       `HSpacing(2.0)

			       );
	return contents;

    }

/**
 * ScannerInstallDialog
 */
    global define symbol ScannerInstallDialog()``{
	string help    = "";
      
	// help part 1 of dialog scanner test
	string help1    = _("<p>Your new scanner was installed
successfully.</p>");
	// help part 2 of dialog scanner test
	string help2    = _("<p>You can test the scanner now.
Insert a test page and click on the <b>Test</b> button.
Press <b>Next</b> to finish the installation.</p>");
	// TODO: describe the problem with certain Agfa scanners (firmware has to be loaded manually -.
	// do not try to test in that case). 
	// help part 3 of dialog scanner test
	string help3    = _("<p>The program <b>xscanimage</b>
from package <i>sane</i> (already installed) provides
basic functionality for scanning.</p>");
	// help part 4 of dialog scanner test
	string help4 = _("<p>The scan program <b>Kooka</b>
(requires installation of the package <i>kdegraphics3-scan</i>)
offers more scan and image processing functionality.
<b>The GIMP</b> and <b>xsane</b> also provide scan support.</p>
");
      
	help = help1 + help2 + help3 + help4;

	// headline of the test dialog
	string caption = _("Scanner Test");
	map installed = GetCurrentScanner();

	byteblock logo =  #[00000001];
	logo = (byteblock) SCR::Read( .local.byte,
				      "/usr/share/doc/packages/sane/sane-backends/umax/sane-logo2.jpg");
	if ( logo == nil )
	     logo = #[00000001];
	
	term contents  = ScannerInstallDialog_UI( installed,
						  logo );

	Wizard::SetContentsButtons(caption,contents,help,Label::BackButton(),Label::NextButton());

	// Check if tool convert exists, otherwise do disable test button.
	// -> we do not need this any longer - the `Image widget does all the work 
	  
	// Check whether a firmware is needed
	string firmware_req = (string) SCR::Read(.sane.firmware, installed );

	y2milestone( "Installed scanner: %1 driver: %2 needs firmware: %3",
		     installed["vendor"]:"", installed["scanner_driver"]:"", firmware_req );

	if ( firmware_req != "none" )
	{
	    string msg_str = "";
	    if ( firmware_req == "some" )
	    {
		msg_str = sformat( 
				  // text of an info popup
				  _("Some %1 %2 scanners require a firmware upload.

You should not test the scanner now but finish the
scanner installation first.
Check 'http://snapscan.sourceforge.net' to see whether
an upload is required.

'man sane-snapscan' also provides detailed information.

"), installed["vendor"]:"", installed["scanner_driver"]:"" );
	    }
	    else if ( firmware_req == "all" )
	    {
		// text of an info popup 
		msg_str = _("The scanner requires a firmware upload.
You cannot test the scanner now.\n
Finish the scanner installation first. After that
do the firmware upload. See 'man sane-gt68xx' or
'man sane-artec_eplus48u' for details.\n\n");
		// disable the test button
		UI::ChangeWidget(`id(`test), `Enabled, false); 
	    }
	    Popup::Message ( msg_str );
	}

	any ret = nil;

	repeat {

	    ret = UI::UserInput();

	    term image = `Empty();

	    if ( ret == `test )
	    {
		// Disable test button while scanning.
		UI::ChangeWidget(`id(`test), `Enabled, false);
		map scanner = GetCurrentScanner();
		string tmpdir = (string) SCR::Read(.target.tmpdir);
		y2debug("TmpDir is tmpdir %1", tmpdir );

		scanner = add( scanner, "tmpdir", tmpdir );
		string filename = (string) SCR::Execute(.sane.scanimage, scanner );
		if ( filename != "" )
		{
		    byteblock image_data = #[00000001];
		    image_data = (byteblock) SCR::Read(.local.byte, filename);

		    if ( image_data == nil )
			image_data = #[00000001];
		    
		    image = `Image( `opt(`scaleToFit), image_data, _("Test picture"));

		    UI::ReplaceWidget(`id(`replace), image );
		}
		UI::ChangeWidget(`id(`test), `Enabled, true);
	    }
	  
	} until ( ret == `next || ret == `back || ret == `abort || ret == `cancel );


	return (symbol) ret;
    }

}
