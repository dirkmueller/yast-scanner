/**
 * File:
 *   scanner_manual.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 *
 *
 * $Id$
 *
 * 
 * Manual scanner selection. 
 * 
 *
 */

{
  textdomain "scanner";

  import "Label";
  import "Scanner";
  import "Wizard";
  import "Popup";
    
  define list<term> CreateVendorList( ) ``{
      list<term> list_input = [];
      list<string> vlist = (list<string>) SCR::Read(.sane.vendorlist, Scanner::GetCurrentScanner());
      //used to preselect first entry
      boolean isfirst = true;

      //sort list alphabetically
      vlist=sort( string a, string b, vlist,``(a<b));

      y2debug( "Vendorlist: %1", vlist );
      
      foreach( string vendor, vlist, ``{
		  if(isfirst)
		  {
		    list_input = add( list_input, `item(`id(vendor), vendor, true));
		    isfirst = false;
		  }
		  else
		    list_input = add( list_input, `item(`id(vendor), vendor));
	      });

      return list_input; 
  }

  define list<term> CreateModelList( string vendor ) ``{
      list<term> list_input = [];
      Scanner::SetCurrentScannerValue( "vendor", vendor );
      list<string> mlist = (list<string>) SCR::Read(.sane.modellist, Scanner::GetCurrentScanner());
      
      //sort list alphabetically
      mlist=sort( string a, string b,mlist,``(a<b));

      y2debug( "Modellist: %1", mlist );

      foreach(string model, mlist, ``{
		  list_input = add( list_input, `item(`id(model), model));
	      });

      return list_input; 
  }
  
  define term ScannerManualDialog_UI( map current_scanner ) ``{

      string vstring =  lookup( current_scanner, "vendor", "" );
      
      if ( vstring == "" )
      {
	  // this is a part of the scanner type, e.g. SCSI scanner
	  vstring = lookup( current_scanner, "bus", "" ) + " " + _("scanner");
      }
      string mstring = lookup( current_scanner, "device", "" );
      if ( mstring == "" )
      {
	  mstring = lookup( current_scanner, "dev_name", "" );
      }
      
      string scanner = vstring + " - " + mstring;

      list<term> vendor_list = CreateVendorList();
      list<term> model_list  = CreateModelList( vendor_list[0, 1]:"" );

      term layout = `VBox(
			  `VSpacing (1),
			  // this is a label; the name of the scanner follows
			  `Left(`Label (`opt (`hstretch), _("The scanner"))),
			  `VSpacing(0.3),
			  `HBox (`HSpacing(2.5),
				 `HWeight(5, `Label (`opt (`outputField, `hstretch), scanner)),
				 `HWeight(1, `Empty())
				 ),
			  `VSpacing(0.6),
			  // this is a headline; the lists with vendors and corresponding models follows  
			  `Left( `Label (`opt (`hstretch), _("will be installed as:")) ),
			  `VSpacing (0.3),
			  `HBox(`HSpacing(0.5),
				`HBox (`SelectionBox (`id (`vendor), `opt (`notify),
						      // selection box label (list of vendors)
						      _("&Select vendor"), vendor_list ),
				       `ReplacePoint (`id (`model_rep),`SelectionBox (`id (`model), `opt (`notify),
										      // selection box label (list of models)
										      _("Select &model"), model_list))),
				`HSpacing(3.0)
				),
			  `VSpacing(1.0)
			  );
      return layout;
  }

/**
 * ScannerManualDialog
 */
  define symbol ScannerManualDialog()``{
      string help	= "";
      // help text1 for dialog Manual scanner selection
      // - don't translate SANE (Scanner Access Now Easy) - 
      string help1    	= _("<p>This dialog shows all scanners that are supported
by the SANE library (Scanner Access Now Easy).</p> 
");
      // help text2 for dialog Manual scanner selection
      string help2    	= _("<p>If one of the vendor/model pairs matches
your scanner, select the corresponding entries and proceed with the installation.</p>");
      // helptext3 for dialog Manual scanner selection
      string help3    	= _("<p><b>Attention</b>: only do a manual
selection if you are absolutely sure. Wrong data may cause hardware
failures.</p>");
      // help text4 for dialog Manual scanner selection
      // - don't translate SANE -
      string help4    	= _("<p>If your scanner model is not
contained in the list but you know a SANE driver which works for your scanner,
take \"Generic\" in the vendor list and select the driver manually.</p>");
      // helptext5 for dialog Manual scanner selection
      string help5    	= _("<p>More information can be found on
http://mostang.com/sane and http://sdb.suse.de.</p>");
      help = help1 + help2 + help3 + help4 + help5;

      // headline of the dialog
      string caption = _("Manual scanner selection");

      if ( Scanner::GetCurrentScanner() == $[] )
      { // define a fallback scanner
        // so that the vendor and model list is not empty
        // even if no scanner was autodetected
        map fallback_scanner = $["bus":"USB",
                                 "bus_hwcfg":"usb",
                                 "class_id":268,
                                 "device":"unsupported",
                                 "device_id":000000,
                                 "hotplug":"usb",
                                 "model":"Generic unsupported",
                                 "old_unique_key":"O_5x.4_5nRFdycHD",
                                 "resource":$["baud":[$["speed":1500000]]],
                                 "rev":"1.00",
                                 "sub_class_id":0,
                                 "unique_key":"FKGF.e0BXa1UqUPA",
                                 "vendor":"Generic",
                                 "vendor_id":000000];
        Scanner::CreateScannerEntry( fallback_scanner );
        // show a warning popup which defaults to abort
        string wmesg =
_("No scanner was found.
A dummy USB scanner is now used as a fallback.
If you have an USB scanner (but no HP all-in-one device)
it may work to select the model manually.
Caution:
If you select the wrong model (the wrong driver)
you may damage your scanner or your system may crash.
For this reason, it is recommended to abort now.
");
        if ( ! Popup::AnyQuestion( Label::WarningMsg(),
                                   wmesg,
                                   Label::ContinueButton(),
                                   Label::AbortButton(),
                                   `focus_no )
           ) return (symbol) `abort;
      }

      y2milestone("MANUAL scanner selection for current scanner: %1", Scanner::GetCurrentScanner() );

      term contents  = ScannerManualDialog_UI( Scanner::GetCurrentScanner() );

      Wizard::SetContentsButtons(caption,contents,help,Label::BackButton(),Label::NextButton());

      any ret = nil;
      string vendor = "";
      string model = "";
      
      repeat {
	  ret = UI::UserInput();

	  if ( ret == `vendor )
	  {
	      vendor = (string) UI::QueryWidget(`id(`vendor), `CurrentItem);

	      UI::ReplaceWidget(`id(`model_rep), `SelectionBox (`id (`model),
								`opt (`notify),
								// selection box label
								_("Select &model:"), CreateModelList(vendor)));
	  }
	  else if ( ret == `next )
	  {
	      vendor = (string) UI::QueryWidget( `id(`vendor), `CurrentItem);
	      model  = (string) UI::QueryWidget( `id(`model ), `CurrentItem);

	      if ( vendor != nil && model != nil )
	      {
		  Scanner::SetCurrentScannerValue( "vendor", vendor );
		  Scanner::SetCurrentScannerValue( "device", model );
		  // get driver for current scanner
		  string driver = (string) SCR::Read(.sane.driver, Scanner::GetCurrentScanner() );
		  Scanner::SetCurrentScannerValue( "scanner_driver", driver );
	      }
	      else
	      {
		  // text of a popup
		  Popup::Notify(_("Please select a vendor AND a model from the lists."));
		  ret = `again; 
	      }
	  }

	  y2milestone("MANUAL scanner selection: %1 - %2", Scanner::GetCurrentScannerValue("vendor"),
		      Scanner::GetCurrentScannerValue("device"));
	  
      
      } until ( ret == `next || ret == `back || ret == `abort || ret == `cancel );

      return (symbol) ret;
      
  } 	// end ScannerManualDialog()
      
}
