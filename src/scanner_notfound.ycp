/**
 * File:
 *   scanner_notfound.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de> 2001/07/28
 *
 * $Id$
 * 
 * Notfound dialog. 
 * 
 *
 */

{
  textdomain "scanner";

  import "Label";
    
  global define term ScannerNotFoundDialog_UI() ``{

      term layout = `Empty();

      // This is a label, i.e. the line length should not exceed 50 characters.
      // Inform the user that a manual configuration is necessary.
      layout = `VBox( `Label(`opt (`hstretch), _("Your scanner was not detected automatically -
manual configuration is required.")),
		      `VSpacing(1.5),
		      `HBox(`HSpacing(0.5),
			    // label of a frame with radiobuttons
			    `Frame (_("Select the scanner type"),
				    `RadioButtonGroup(`id(`scanner),
						      `VBox(`VSpacing (0.6),
							    `Left(`RadioButton(`id(`usb),`opt (`hstretch),
									       // radiobutton1 - scanner connected to USB bus
									       _("&USB scanner"), true) ),
							    `VSpacing (0.6),
							    `Left(`RadioButton(`id(`scsi),`opt(`hstretch),
									       // radiobutton2 - scanner connected to SCSI
									       _("&SCSI scanner"),  false) ),
    							    `VSpacing (0.6),
							    `Left(`RadioButton(`id(`ptal),`opt(`hstretch),
									       // radiobutton3 - Hewlett-Packard multi functional
									       // devices; german: Multifunktionsgeraete
									       _("&HP OfficeJet All-in-One"),  false) ),
							    `VSpacing (1.2),
							    `Left(`RadioButton(`id(`net),`opt(`hstretch),
									       // radiobutton4 - network scanner
									       _("N&etwork scan station") ,  false) ),
							    `VSpacing (0.6)
							    )
						      )
				    ),
			    `HSpacing(3.0)
			    ),
		      `VSpacing(1.0)
		      );
      return layout;
  }

/**
 * ScannerNotFoundDialog
 */
  global define symbol ScannerNotFoundDialog()``{
      string help = "";
      // help of Manual Scanner Configuration (start)
      string help1    = _("<p>Please make sure your scanner is
properly connected and switched on.</p> ");

       // help of Manual Scanner Configuration (continued)
      string help2    = _("<p><i><b>Attention!</b></i> Do NOT connect or disconnect SCSI scanners
on a running system - if you want to connect a SCSI scanner, choose
<b>Abort</b> and shutdown your system first.</p>");

      // help of Manual Scanner Configuration (continued)
      string help3    = _("<p>USB scanners may be plugged in and switched on
while the system is running. If you have not yet connected your USB scanner, do so right now.
</p>");

      // help of Manual Scanner Configuration (continued)
      string help4    = _("<p>YaST2 provides assistance for manual
USB and SCSI scanner configuration as well as for Hewlett-Packard
all-in-one devices (e.g., hp psc 2200 series). You can also use
a scanner from a network scan station.</p>
");

       // Note for translators: the functionality to configure more than one USB scanner
       // is not yet provided. In theory, however, it *is* possible.
       // help of Manual Scanner configuration (continued)
       string help5    = _("<p>Please note: you cannot configure or use more than <i>one</i> USB
scanner at the same time.</p>");

      help = help1 + help2 + help3 + help4 + help5;

      // headline of the dialog
      string caption = _("Manual scanner configuration");
      term contents  = ScannerNotFoundDialog_UI();

      Wizard::SetContentsButtons(caption,contents,help,Label::BackButton(),Label::NextButton());

      any ret = nil;
      boolean go_on = true;

      while ( go_on )
      {
	  go_on = true;
	  
	  ret = UI::UserInput();

	  if ( ret == `next || ret == `abort || ret == `back || ret == `cancel )
	  {
	      go_on = false;
	  }
	  
	  if ( ret == `next )
	  {
	      symbol type = (symbol) UI::QueryWidget(`id(`scanner), `CurrentButton);
	      y2milestone("Selected Scanner type: %1", type );

	      if ( type == `usb )
	      {
                  // try again to detect an USB scanner (maybe it is switched on now)
		  list<map> connected_scanner = (list<map>) SCR::Read(.probe.scanner);
		  list<map> usb_scanner = filter(map scanner, connected_scanner,
					      ``( scanner["bus"]:"" == "USB" ) );
		  
                  // text part 2 of the warning popup - disconnect unused scanners
		  string msg = _("Please disconnect all unwanted USB scanners
and restart the scanner configuration.");

                  // we support only ONE USB scanner
		  if ( size (usb_scanner) > 1 )
		  {
		      // text part 1 of the warning popup - disconnect unused scanners
		      Popup::Warning(_("Several USB scanners are connected, 
but you can only use ONE of them.") + "\n" + msg);
		      ret = `back;
		  }
		  else if ( CheckUSBScanner() )
		  {
		      // text of a warning popup
		      Popup::Warning(_("There is already an USB scanner in use.
It is not possible to configure an additional
USB scanner, because only ONE is supported.") + "\n" + msg);
		      ret = `back;
		  }
		  else if ( size (usb_scanner) == 1 )
		  {
		      // try once again the scanner start dialog
		      // -> scanner already configured -> overview dialog
		      // -> new unsupported scanner  -> manual
		      // -> new supported scanner  -> new
		      if ( !lookup( user_settings, "check_again", false ) )
			  user_settings = add(user_settings, "check_again", true);
		      else
			  user_settings = add(user_settings, "check_again", false);
		      
		      ret = `start;
		  }
		  else
		  {
		      if ( Popup::AnyQuestion( Label::WarningMsg(),
					      _("Your USB scanner cannot be configured manually.
Do you want to go on with manual configuration dialog
(see help text there for more information)
or abort the scanner configuration now?"),
			   Label::ContinueButton(),
			   Label::AbortButton(),
			   `focus_no ) )
		      {
			  ret = `manual;
			  // create the entry for the USB scanner
			  CreateScannerEntry( $["bus":"USB", "dev_name":"/dev/usbscanner"]);
		      }
		      else
		      {
			  ret = `abort;
		      }
		  }
	      }
	      else if ( type == `ptal )
	      {
		  // check whether the package hp-officeJet is installed
		  boolean installed = CheckOfficeJet();
		  if ( !installed )
		  {
		      ret = `cancel;
		      continue;
		  }
		      
		  // call ptal-init setup
		  integer exitcode = (integer) SCR::Execute (.target.bash, "ptal-init setup-usb 2>&1 > /dev/null" );

		  if ( exitcode != 0 )
		  {
		      y2error( "command 'ptal-init setup-usb' failed" );

		      boolean ret_bool = Popup::AnyQuestion( Label:: ErrorMsg(),
			   // Text of an error popup. YaST2 should automatically detect USB
			   // connected devices (if switched on). If an error occurs or if connected
                           // to JetDirect the user has to do the configuration manually.
			   _("The initialisation of the HP all-in-one device failed.
Make sure the device is switched on and try again.
If the device cannot installed correctly, try to
call 'ptal-init setup' manually (you must be root
to do this). Configure the scanner by enabling the
'hpoj' driver in '/etc/sane.d/dll.conf.
In the case of a JetDirect connection, abort the
scanner configuration now and also do the setup
and configuration manually.
"),
							Label::RetryButton(),
							Label::AbortButton(),
							`focus_yes);
		      if ( ret_bool )
		      {
			  go_on = true;
		      }
		      else
		      {
			  ret = `cancel;
			  continue;
		      }
		  }

		  list<map> ptal_scanner = (list<map>) SCR::Read(.scanner.ptal);
		  y2milestone( "HP all-in-one devices: %1", ptal_scanner );

		  if ( size (ptal_scanner) > 1 )
		  {
		      map<integer, map> scanners = $[];
		      integer no = 0;
		      foreach (map scanner, ptal_scanner, ``{
			  scanners = (map<integer, map>) add( scanners, no, scanner );
			  no = no+1;
		      }	);
		      // headline for a popup
		      integer id = (integer) DisplayScannerList( scanners, _("List of HP All-in-One Devices") );
		      CreateScannerEntry( scanners[id]:$[] );
		      ret = `manual;
		  }
		  else if ( size (ptal_scanner) == 1 )
		  {
		      CreateScannerEntry( ptal_scanner[0]:$[]);
		      ret = `manual;
		  }
		  else
		  {
		      go_on = true;
		  }
	      }
	      else
	      {
		  y2debug( "Returning type %1", type );
		  ret = type;
	      }
	  }
      };

      return (symbol) ret;
  }

}
