/**
 * File:
 *   scanner_overview.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   This dialog is shown at the begin of the workflow, if an already installed
 *   scanner is found AND at the end when a new scanner is configured.
 *   Leaving the dialog with Finish means: confirm the installation, Abort means
 *   reset all changes.
 *
 *  	if (user_click_on_finish)
 *	   - let all changes made on system
 *	   - maybe additional changes necessary?
 *         - if (scsi_scanner_installed)
 *		install boot script (check/reset permissions of /dev/sg_)
 *    		(because permissions of /dev/sg_ are set to 666)   
 *
 *	if (user_click_on_abort)
 *	   - reset all changes
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *   Klaas Freitag <freitag@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/27
 *
 * $Id$
 *
 *
 */

{

  textdomain "scanner";

  import "Label";
  
  global define ScannerOverviewDialog_UI( term table ) ``{

      term layout = `Empty();

      layout = `VBox(
		     `VSpacing( 0.8 ),
		     // headline of a list showing installed scanners
		     `Left(`Label(_("List of installed scanners"))),
		     `VSpacing( 0.4 ),
		     `ReplacePoint(`id(`scanner_table_rp),table),		     
		     `HBox(
			   //`HWeight(1, `PushButton(`id(`edit), _("&Edit"))),
			   // button label
			   `HWeight(1, `PushButton(`id(`delete), _("&Delete"))),
			   // button label
			   `HWeight(1, `PushButton(`id(`add), `opt(`default), _("&Add"))),
			   `HStretch()
			   ),
		     `VSpacing( 0.2 )
		     );

      return layout;
  };

  // creates the table widget from scanner map
  global define CreateScannerTable (map scanner_map) ``{
    list scanner_table = [];
    string vendor_prefix = "";
    foreach (`key, `value, scanner_map, ``{
	if ( lookup(value, "scanner_status", `emtpy) == "installed" )
	{
	    string suffix = "";
	    if( lookup( value, "bus", "") == "Net" ) 
	    {
		suffix = " (" + lookup( value, "host", "localhost" ) + ") ";
	    }
	    scanner_table = add(scanner_table,
				`item(`id(key),
				      lookup(value, "vendor", ""),
				      lookup(value, "device", ""),
				      lookup(value, "bus", "") + suffix));
	}
	else
	{
	    y2debug( "Found scanner, but it is not installed" );
	}
    });

    return `Table(`id(`scanner_table),`opt(`notify, `hvstretch),
		  // column headers
			    `header( _("Vendor"), _("Model"), _("Connected to") ),
			    scanner_table
			    );
  }

  /**
   * OverviewDialog dialog
   */
   
  global define ScannerOverviewDialog()``{
      map  scanner_map 	= lookup( user_settings, "scannerInfo", $[] );
      
      string help = "";
      // help part1 of scanner overview dialog
      string help1    = _("<p>This overview dialog shows the
 already installed scanners.</p>"
			     );
       // help part2 of scanner overview dialog
      string help2 = _("<p>If you want to remove a scanner configuration,
select the corresponding entry from the list and press <b>Delete</b>.
</p>");

       // help part3 of scanner overview dialog
      string help3 = _("<p> 
If you want to install a new scanner, press the <b>Add</b> button.
At the end of the configuration the new scanner will appear in this list.
</p>");
      
       // help part4 of scanner overview dialog
      string help4 = _("<p>Press the <b>Finish</b> button to save the
settings.</p>");
      
      // help part5 of scanner overview dialog
      string help5 = _("<p>
If you leave this dialog with <b>Abort</b>, all changes made in this dialog
will be discarded and your system will be reverted to the previous state.
</p>");
      help = help1 + help2 + help3 + help4 + help5;
      
      // headline of the dialog
      string caption = _("Scanner Overview");

      term contents = ScannerOverviewDialog_UI( CreateScannerTable(scanner_map) );

      Wizard::SetContentsButtons(caption,contents,help,
				   Label::BackButton(),
				   Label::NextButton());

      term finish_button = `PushButton(`id(`finish), Label::FinishButton() );
      Wizard::ReplaceNextButton( finish_button );
      
      any ret = nil;
      boolean go_on = true;

      while (go_on )
      {
	  integer scanner_id = 0;

	  ret = UI::UserInput();

	  if ( ret == `delete )
	  {
	      // which scanner is selected?
	      scanner_id = UI::QueryWidget( `id(`scanner_table), `CurrentItem );
	      if ( scanner_id == nil )
	      {
		  // text of a popup
		  Popup::Notify(_("Please select a scanner from the list."));
	      }
	      else
	      {
		  user_settings = add(user_settings, "scannerInWork", scanner_id);
		  y2debug( "DELETE scanner: %1", GetCurrentScannerValue("device") );

		  // text of a popup: ask the user whether to delete the sacnner
		  // configuration (%1: the vendor, %2: the device) 
		  string message = sformat( _("Do you really want to remove the
configuration of the scanner %1, %2 ?\n"), GetCurrentScannerValue("vendor"),
					    GetCurrentScannerValue("device") );   

		  boolean yesnoret = Popup::YesNoHeadline( Label::WarningMsg(), message);
		  if(yesnoret==true)
		  {
		    // remove scanner_id form scannerInfo
		    DeleteScannerEntry(scanner_id);
		    // get new scanner_map
		    scanner_map = lookup( user_settings, "scannerInfo", $[] );
		    // update widget
		    UI::ReplaceWidget(`id(`scanner_table_rp),CreateScannerTable(scanner_map));
		  }
	      }
	  }
	  else if ( ret == `finish )
	  {
	      // text of a popup with Yes/No button 
	      any ret = Popup::YesNo(_("Save all settings and exit?"));
	      if ( ret )
	      {
		  y2debug( "FINISH scanner workflow" );
		  go_on = false;
		  SCR::Execute( .target.bash, "mkdir -p /var/lib/sane" );
		  SCR::Execute( .target.bash, "touch /var/lib/sane/sane_configured" );
	      }
	  }
	  else if ( ret == `add )
	  {
	      ret = DecideDialog( `add );
	      go_on = false;
	  }
	  else
	  {
	      go_on = false;
	  }
	  
      }

      // restore Next button
      term next_button = `PushButton(`id(`next), Label::NextButton() );
      Wizard::ReplaceNextButton( next_button );

      return ret;
  }

}
