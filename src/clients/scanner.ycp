
/*
 * Copyright (c) 2010 Novell, Inc.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail,
 * you may find current contact information at www.novell.com
 */

/**
 * File:	clients/scanner.ycp
 * Package:	Configuration of scanner
 * Summary:	Main file
 * Authors:	Johannes Meixner <jsmeix@suse.de>
 *
 * $Id$
 *
 * Main file for scanner configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of scanner</h3>
 */

textdomain "scanner";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("Scanner module started");

import "CommandLine";
import "Scanner";

include "scanner/wizards.ycp";

map command_line_description =
$[ "id" : "scanner",
   // Text for the command_line_description:
   "help" : _("Scanner Configuration"),
   "guihandler" : ScannerSequence,
   "initialize" : Scanner::Read,
   "finish" : Scanner::Write,
   "actions" : $[],
   "options" : $[],
   "mappings" : $[]
];

/* is this propose mode or not? */
boolean propose_mode = false;
list args = WFM::Args();
if( size(args) > 0 )
{ if( is(WFM::Args(0),string) && WFM::Args(0) == "propose" )
  { y2milestone("Using propose mode");
    propose_mode = true;
  }
}

/* main ui function */
any ret = nil;

if( propose_mode )
{ y2milestone("Calling ScannerAutoSequence()");
  ret = ScannerAutoSequence();
  y2milestone("Return value of ScannerAutoSequence() is: %1", ret);
}
else
{ y2milestone("Calling CommandLine::Run(%1)", command_line_description );
  ret = CommandLine::Run(command_line_description);
  y2milestone("Return value of CommandLine::Run(%1) is: %2", command_line_description, ret);
}

/* Finish */
y2milestone("Finishing scanner module");
y2milestone("Return value will be: %1", ret);
y2milestone("----------------------------------------");

return ret;

/* EOF */

}

