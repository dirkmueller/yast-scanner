/**
 * File:
 *   scanner_new.ycp
 *
 * Module:
 *   Configuration scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * New English msg strings by Christian Steinruecken <cstein@suse.de>
 *
 * $Id$
 *
 * 
 * Installation of a new scanner. 
 * 
 *
 */

{
   textdomain "scanner";
   
  /**
   * ScannerStartDialog Layout	
   */
  
  global define ScannerNewDialog_UI( map new_scanner )``{

      string model  = "default_model";
      string vendor = "default_vendor";
      string driver = "default_driver";
      
      if ( new_scanner != $[] )
      {
	  model = lookup( new_scanner, "device", "" );
	  vendor = lookup( new_scanner, "vendor", "" );
	  driver = lookup( new_scanner, "scanner_driver", "" );
	  if ( driver == "" )
	  {
	      driver = SCR(`Read(.sane.driver, new_scanner));
	      SetCurrentScannerValue( "driver", driver );
	  }
      }
      
      term layout = `VBox (
			   `VSpacing (1),
			   `Left(`Label (`opt (`hstretch), _("Scanner model"))),
			   `VSpacing(0.3),
			   `HBox (`HSpacing(2.5),
				  `HWeight(5, `Label (`opt (`outputField, `hstretch), model)),
				  `HWeight(1, `Empty())
				  ),
			   `VSpacing(0.5),
			   `Left(`Label (`opt (`hstretch), _("Vendor"))),
			   `VSpacing(0.3),
			   `HBox (`HSpacing(2.5),
				  `HWeight(5, `Label (`opt (`outputField, `hstretch), vendor)),
				  `HWeight(1, `Empty())
				  ),
			   `VSpacing(0.5),
			   `Left(`Label (`opt (`hstretch), _("SANE driver"))),
			   `VSpacing(0.3),
			   `HBox (`HSpacing(2.5),
				  `HWeight(5, `Label (`opt (`outputField, `hstretch), driver)),
				  `HWeight(1, `Empty())
				  ),
			   `VSpacing (1),
			   `Left(`RadioButtonGroup (
						    `id (`action),
						    `VBox (
							   // radio button1: install the scanner found by YaST2
							   `RadioButton (`id (`install), `opt (`hstretch), _("&Install this scanner"), true),
							   `VSpacing (1.0),
							   // radio button2: select a different scanner
							   `RadioButton (`id (`different), `opt (`hstretch), _("&Select a different scanner"))
							   )
						    )
				 ),
			   `VSpacing (3.0)
			   );
      return layout;

  };

  
/**
 * ScannerStartDialog	
 */
  global define ScannerNewDialog( )``{

      boolean test_mode = lookup( user_settings, "test_mode", false );

      string help = "";
      
      // part 1 of helptext of dialog Scanner installation
      string help1    = UI(_("<p>All required scanner data
were detected. Please check whether the vendor and model
settings are correct and proceed with the installation if 
the data are <i>OK</i>.</p>"));

      // part 2 of helptext of dialog scanner installation
      string help2 = UI(_("<p>If you press <b>Next</b>, YaST2 will install the
scanner and automatically set reasonable values for all options.</p>"));

      // part 3 of helptext of dialog scanner installation
      string help3 =  UI(_("<p>In case the data are incorrect or you want
to install a different scanner please click on the appropriate button.
</p>"));

       // part 4 of helptext of dialog scanner installation
      string help4 =  UI(_("<p>You will have the possibilty to do
a manual configuration.
</p>"));
      
      help = help1 + help2 + help3 + help4;
      
      string caption = UI(_("Scanner installation"));

      y2debug( "New scanner: %1, %2", GetCurrentScannerValue( "vendor" ),
	       GetCurrentScannerValue( "device" ));

      term contents  = ScannerNewDialog_UI( GetCurrentScanner() );

      UI(`SetWizardContentsButtons(caption,contents,help,BackButtonLabel(),NextButtonLabel()));

      boolean go_on = true;
      any ret = nil;
      
      repeat  {

	  ret = UI(`UserInput());
	  
	  if ( ret == `next )
	  {
	      symbol choice = UI(`QueryWidget(`id(`action), `CurrentButton ));
	      y2debug( "CHOICE: %1", choice );

	      if ( !test_mode )
	      {
		  if ( choice == `install )
		  {
		      //  *do* the scanner configuration
		      boolean configure_ok = SCR::Read(.sane.writeconfig, GetCurrentScanner());
		      
		      if ( configure_ok )
		      {
			  SetCurrentScannerValue( "scanner_status", "installed" );
		      }
		      else
		      {
			  UI(`ErrorPopup(_("The scanner configuration was not successful.")));
			  ret = `abort;
		      }
		  }
		  else
		  {
		      // go on with manual configuration
		      ret = `notfound;
		  }
	      }
	  }
      } until ( ret == `next || ret == `back || ret == `abort || ret == `notfound );
      
      return ret;
  };

}
