/**
 * File:
 *   scanner_new.ycp
 *
 * Module:
 *   Configuration scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 *
 * $Id$
 *
 * 
 * Installation of a new scanner. 
 * All required data are available - the scanner will be installed
 * (ag_sane - writeconfig).
 *
 */

{
   textdomain "scanner";

   import "Label";
   import "Scanner";

   import "Wizard";
   import "Popup";

   /**
   * ScannerNewDialog Layout	
   */
  
  define term ScannerNewDialog_UI( map new_scanner )``{

      string model  = "default_model";
      string vendor = "default_vendor";
      string driver = "default_driver";
      
      if ( new_scanner != $[] )
      {
	  model = lookup( new_scanner, "device", "" );
	  vendor = lookup( new_scanner, "vendor", "" );
	  driver = lookup( new_scanner, "scanner_driver", "" );
	  if ( driver == "" )
	  {
	      driver = (string) SCR::Read(.sane.driver, new_scanner);
	      Scanner::SetCurrentScannerValue( "scanner_driver", driver );
	  }
      }
      
      term layout = `VBox (
			   `VSpacing (1),
			   // label: the scanner model
			   `Left(`Label (`opt (`hstretch), _("Scanner model"))),
			   `VSpacing(0.3),
			   `HBox (`HSpacing(2.5),
				  `HWeight(5, `Label (`opt (`outputField, `hstretch), model)),
				  `HWeight(1, `Empty())
				  ),
			   `VSpacing(0.5),
			   // label: vendor of the scanner
			   `Left(`Label (`opt (`hstretch), _("Vendor"))),
			   `VSpacing(0.3),
			   `HBox (`HSpacing(2.5),
				  `HWeight(5, `Label (`opt (`outputField, `hstretch), vendor)),
				  `HWeight(1, `Empty())
				  ),
			   `VSpacing(0.5),
			   // label: the driver (do not translate 'SANE', it's a package name)
			   `Left(`Label (`opt (`hstretch), _("SANE driver"))),
			   `VSpacing(0.3),
			   `HBox (`HSpacing(2.5),
				  `HWeight(5, `Label (`opt (`outputField, `hstretch), driver)),
				  `HWeight(1, `Empty())
				  ),
			   `VSpacing (1),
			   `Left(`RadioButtonGroup (
						    `id (`action),
						    `VBox (
							   // radio button1: install the scanner found by YaST2
							   `RadioButton (`id (`install), `opt (`hstretch), _("&Install this scanner"), true),
							   `VSpacing (1.0),
							   // radio button2: select a different scanner
							   `RadioButton (`id (`different), `opt (`hstretch), _("&Select a different scanner"))
							   )
						    )
				 ),
			   `VSpacing (3.0)
			   );
      return layout;

  };

  
/**
 * ScannerStartDialog	
 */
define symbol ScannerNewDialog()
``{ boolean test_mode = lookup( Scanner::user_settings, "test_mode", false );
    string help = "";
    // part 1 of helptext of dialog Scanner installation
    string help1 = _("<p>All required scanner data
were detected. Please check whether the vendor and model
settings are correct and proceed with the installation if 
the data are <i>OK</i>.</p>");
    // part 2 of helptext of dialog scanner installation
    string help2 = _("<p>If you press <b>Next</b>, YaST2 will install the
scanner and automatically set reasonable values for all options.</p>");
    // part 3 of helptext of dialog scanner installation
    string help3 =  _("<p>In case the data are incorrect or you want
to install a different scanner please click on the appropriate button.
</p>");
    // part 4 of helptext of dialog scanner installation
    string help4 =  _("<p>You will have the possibilty to do
a manual configuration.
</p>");
    help = help1 + help2 + help3 + help4;
    // headline of the dialog
    string caption = _("Scanner installation");
    y2debug( "New scanner: %1, %2", Scanner::GetCurrentScannerValue( "vendor" ), Scanner::GetCurrentScannerValue( "device" ));
    term contents  = ScannerNewDialog_UI( Scanner::GetCurrentScanner() );
    Wizard::SetContentsButtons(caption,contents,help,Label::BackButton(),Label::NextButton());
    boolean go_on = true;
    any ret = nil;
    repeat
    { ret = UI::UserInput();
      if ( ret == `next )
      { symbol choice = (symbol) UI::QueryWidget(`id(`action), `CurrentButton );
        y2debug( "CHOICE: %1", choice );
        if ( choice == `install )
        { if ( !test_mode )
          { map scanner = Scanner::GetCurrentScanner();
            //  *do* the scanner configuration
            boolean configure_ok = SCR::Write(.sane.writeconfig, scanner );
            if ( configure_ok )
            { Scanner::SetCurrentScannerValue( "scanner_status", "installed" ); 
              if ( lookup( scanner, "bus", "" ) == "USB" )
              { integer exitcode = 1;
                // workaround for 9.1: write USB IDs to /etc/sane.d/<driver>.conf
                // (not yet all IDs are added to the <driver>.conf files, see bug #35454)
                integer vendor_id = lookup( scanner, "vendor_id", 0 );
                if (vendor_id != 0 ) vendor_id = vendor_id - 196608; // subtract 0x30000
                integer product_id = lookup( scanner, "device_id", 0 );
                if ( product_id != 0 ) product_id = product_id - 196608; // subtract 0x30000
                string usb_ids = sformat( "%1 %2", tohexstring( vendor_id ), tohexstring( product_id ) );
                // test whether the USB IDs already exist in /etc/sane.d/<driver>.conf
                exitcode = (integer)SCR::Execute( .target.bash, sformat("grep -q \"^usb %1\" /etc/sane.d/%2.conf || echo \"usb %1\" >>/etc/sane.d/%2.conf", usb_ids, lookup(scanner, "scanner_driver", "")) );
                if( exitcode == 0 )
                { y2milestone( "WROTE \"usb %1\" to /etc/sane.d/%2.conf", usb_ids, lookup(scanner, "scanner_driver", "") );
                  // Append entry to /etc/hotplug/usb/sane.usermap (using pseudo module name "desktopdev"):
                  // See /etc/hotplug/usb/sane-hardcoded.usermap for the syntax of entries:
                  // desktopdev 0x0003 vendor model 0x0000 0x0000 0x00 0x00 0x00 0x00 0x00 0x00 0x0
                  string user_entry = sformat( "desktopdev 0x0003 %1 0x0000 0x0000 0x00 0x00 0x00 0x00 0x00 0x00 0x0", usb_ids );
                  // Test whether the entry already exist in /etc/hotplug/usb/sane.usermap
                  exitcode = (integer)SCR::Execute(.target.bash, sformat("grep -qs \"^%1\" /etc/hotplug/usb/sane.usermap", user_entry ) );
                  if( exitcode != 0 )
                  { // No such entry already exist in /etc/hotplug/usb/sane.usermap
                    // Append the entry to /etc/hotplug/usb/sane.usermap
                    exitcode = (integer)SCR::Execute(.target.bash, sformat("echo \"%1\" >>/etc/hotplug/usb/sane.usermap", user_entry ) );
                    if( exitcode == 0 )
                    { y2milestone( "WROTE \"%1\" to /etc/hotplug/usb/sane.usermap", user_entry );
                      string mesg =
_("Scanner access for normal users is granted by the resource manager (resmgr).
The resource manager is triggered by the hotplug system.
The hotplug system is triggered when connecting the scanner to the USB.
An entry was added to /etc/hotplug/usb/sane.usermap to grant scanner access
for those users which belong to the \"desktop\" group (users which are
logged in via graphical login via KDM or XDM).
To activate this new setting you should disconnect and reconnect the USB scanner.
If this doesn't work, reboot while the scanner is connected and switched on.
If even reboot doesn't help, verify that at least \"root\" can access the scanner
by running the command \"scanimage -L\" as root and compare the result
when running the same command as normal user.
If \"scanimage -L\" doesn't show the scanner even when running it as root,
have a look at the \"SANE - Supported Devices\" page at http://www.sane-project.org/
to verify that the scanner is supported. ");
                      Popup::Notify( mesg );
                    }
                  }
                }
                if( exitcode != 0 )
                { // test and append USB IDs to /etc/sane.d/<driver>.conf failed
                  // or test and append entry to /etc/hotplug/usb/sane.usermap failed
                  Popup::Error(_("The scanner configuration was not successful."));
                  ret = `abort;
                }
                // TODO get libusb device name
                // Scanner::SetCurrentScannerValue( "dev_name", device );
              }
		      }
            else
            { // configure_ok is false
              // go on with manual configuration
              ret = `notfound;
            }
          }
          // test_mode is true
	     }
        // choice != `install
	   }
      // ret != `next
    }
    until ( ret == `next || ret == `back || ret == `abort || ret == `notfound || ret == `cancel );
    return (symbol) ret;
  };
}
