/**
 * File:
 *   scanner_usb.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *
 * This dialog is called only if the USB scanner is not detected by hw-library.
 * All scanners from driver source files /usr/src/linux-<kernel-version>.SuSE/
 * drivers/usb/ scanner.c or microtek.c are listed in dynamically created
 * file /lib/modules/<kernel-version>/modules.usbmap.
 * In case the scanner is known the USB module will be loaded automatically
 * (hotplug).
 * Otherwise the module must be loaded with: modprobe <module name> ID ID
 * The options must be added to /etc/modules.conf.    
 *
 * Remark: Up to verion 7.2 the USB manager had an own, manually created config file
 *         /etc/usbmgr/usbmgr.conf which is obsleted by the hotplug script now.
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/31
 *
 * $Id$
 *
 * 
 */

{

  global define ScannerUSBDialog_UI( list device_list ) ``{

      list module_list = ["scanner", "microtek"];
      term layout = `Empty();
      
      // This is a label, i.e. the line length should not exceed 50 characters.
      layout = `VBox(`VSpacing(1.0),
		     `Label(`opt (`hstretch), _("YaST2 could not load the USB scanner
module automatically.\n
Please select your scanner from the list below.")),
		      `VSpacing(0.3),
		      `HBox( `HWeight(6, `SelectionBox(`id(`sel_usb),
						     // label for a list of USB devices
						     _("&USB devices"),
						     device_list )),
			     `HWeight(1, `Empty())
			     ),
		      `VSpacing(1.0),
		      `HBox(
			    // Label for the selection box of the module
			    `Left(`ComboBox(`id(`module), `opt(`notify), _("&USB module name"),
				      module_list
				      )),
			    `VBox(
				  `VSpacing(1.0),
                                  // button label 
				  `HCenter(`PushButton (`id (`load), _("&Load"))),
				  `VSpacing(0.2)
				  )
			    ),
		      `VSpacing(1.0)
		      );
      return layout;
  }

/**
 * ScannerStartDialog
 */
  global define ScannerUSBDialog()``{
      string help = "";

      // help part 1 of dialog manual USB Scanner configuration
      string help1_unused    = UI(_("<p>Please enter the product (model) ID,
the vendor ID and the USB module name (usually 'scanner')
and press the <b>Load</b> button.</p>"));

      // help part 2 of dialog manual USB Scanner configuration
      // Translators: Please DO NOT translate 'Vendor:' and 'Model:'!
      string help2_unused    = UI(_("<p>The information on the IDs can be obtained
by issuing the command <b>hwinfo --usb</b> (look for the '<i>Vendor:</i>'
and '<i>Model:</i>' entries and take the digits in front, e.g. 010c).
</p> "));

      // help part 1 of dialog manual USB Scanner configuration
      string help1    = UI(_("<p>YaST2 shows a list of USB devices which are not
clearly identified. If you find your scanner,
please select the corresponding list entry.</p>"
 ));

      // help part 2 of dialog manual USB Scanner configuration
      string help2 = UI(_("Also select the USB module (usually 'scanner')
and press the <b>Load</b> button.</p>"));
      
      // help part 3 of dialog manual USB Scanner configuration
      string help3    = UI(_("<p>YaST2 will try to load the
USB kernel module.</p> "));

      // help part 4 of dialog manual USB Scanner configuration
      string help4    = UI(_("<p>If the scanner module loaded 
successfully you can proceed to the
\"Manual scanner selection\" dialog by clicking on <b>Next</b>.</p>"));

      help = help1 + help2 + help3 + help4;

      // get a list of USB devices
      list usb_devices = SCR(`Read(.probe.bybus.usb));
      y2milestone( "USB devices: %1", usb_devices );

      map usb_unknown = $[];
      list usb_selbox = [];

      /*
       * SCR(`Read(.probe.bybus.usb))
       * ----------------------------
       * [$["bus":"USB",
       * "class_id":268,
       * "device":"Perfection 640",
       * "device_id":196876,
       * "drivers":[$["active":true,"modprobe":true, "modules":$["scanner":""]]],
       * "resource":$["baud":[$["speed":1500000]]],
       * "rev":"0.01",
       * "sub_class_id":0,
       * "sub_device":"Perfection640  ",
       * "sub_vendor":"EPSON",
       * "unique_key":"ldbq.9Hr5DGWrbRF",
       * "vendor":"Epson",
       * "vendor_id":197816]]
       *
       * The result map does NOT contain a "drivers" entry if the device is unknown.
       */
      
      if ( lookup (user_settings, "test_mode", false ) )
      {
	  usb_devices = [
			 $["bus":"USB", "class_id":268, "device":"Perfection 640",
			  "device_id":196876,
			  "drivers":[$["active":true,"modprobe":true, "modules":$["scanner":""]]],
			  "resource":$["baud":[$["speed":1500000]]],
			  "rev":"0.01", "sub_class_id":0, "sub_device":"Perfection640  ", "sub_vendor":"EPSON",
			  "unique_key":"ldbq.9Hr5DGWrbRF", "vendor":"Epson", "vendor_id":197816],
			 $["bus":"USB", "class_id":268, "device":"Perfection 649",
			  "device_id":196876,
			  "resource":$["baud":[$["speed":1500000]]],
			  "rev":"0.01", "sub_class_id":0, "sub_device":"Perfection640  ", "sub_vendor":"EPSON",
			  "unique_key":"ldbq.9Hr5DGWrbRF", "vendor":"Epson", "vendor_id":197816]  ];
      }

      integer no = 1;
      string list_entry = "";

      // get all unknown USB devices
      foreach ( `device, usb_devices, ``{
	  if ( lookup( device, "drivers", [] ) == [] )
	  {
	      usb_unknown = add( usb_unknown, no, device );
	      string device_str = lookup( device, "device", "");
	      if ( device_str == "" )
	      {
		  device_str = lookup( device, "sub_device", "");  
	      }
	      string vendor_str = lookup( device, "vendor", "");
	      if ( vendor_str == "" )
	      {
		  vendor_str = lookup( device, "sub_vendor", "");  
	      }
	      list_entry = sformat( "%1 - %2", vendor_str, device_str );
	      usb_selbox = add( usb_selbox, `item(`id(no), list_entry ));
	      no = no+1;
	  }
      } );

      // title of the dialog manual USB configuration
      string caption = UI(_("Manual USB scanner configuration for Experts"));
      term contents  = ScannerUSBDialog_UI( usb_selbox );

      UI(`SetWizardContentsButtons(caption,contents,help,BackButtonLabel(),NextButtonLabel()));

      any ret = nil;
      boolean go_on = true;

      // main

      while ( go_on )
      {
	  go_on = true;
	  
	  ret = UI(`UserInput());

	  if ( ret == `next || ret == `abort || ret == `back )
	  {
	      go_on = false;
	  }
	  if ( ret == `load || ret == `next )
	  {
	      // try to load the USB module

	      any usb_device = UI( `QueryWidget(`id(`sel_usb), `CurrentItem) );

	      if ( usb_device == nil )
	      {
		  UI(`NotifyPopup(_("Please select a scanner from the list.")));
		  go_on = true;
	      }
	      else
	      {
		  string module_name = UI(`QueryWidget(`id(`module), `Value));
		  map device 	= lookup( usb_unknown, usb_device, $[] );
		  integer vendor_id = lookup( device, "vendor_id", 0 );
		  if (vendor_id != 0 )
		  {
		      vendor_id = vendor_id - 196608;	// subtract 0x30000
		  }
		  integer product_id = lookup( device, "device_id", 0 );
		  if ( product_id != 0 )
		  {
		      product_id = product_id - 196608;	// subtract 0x30000
		  }
		  string options = sformat("vendor=%1 product=%2",
					   tohexstring(vendor_id),
					   tohexstring(product_id) );
		  string usb_usermap = sformat("%1  %2", tohexstring(vendor_id), tohexstring(product_id) );
		  
		  boolean success = false;

		  if ( vendor_id != 0 && product_id != 0 )
		  {
		      SetCurrentScannerValue("usb_module", module_name);
		      SetCurrentScannerValue("usb_options", $["vendor" : tohexstring(vendor_id),
							      "product": tohexstring(product_id)]);
		      SetCurrentScannerValue("usb_usermap", usb_usermap );
		      
		      success = SCR::Execute(.target.modprobe, module_name, options );
		  }

		  y2milestone( "Loading USB: modprobe %1 %2, exit status: %3", module_name, options, success );  

		  if ( !success )
		  {
		      // text of an error popup: loading the module failed
		      any cont = UI(`ContinueCancelHeadlinePopup( ErrorMsg(),
"The USB module is NOT loaded successfully.
Do you want to have another try or
exit the scanner configuration?"));

		      if ( cont )
		      {
			  go_on = true;
		      }
		      else
		      {
  			  ret = `cancel;
		      }
		  }
		  else
		  {
		      // the USB module is loaded successfully - 
		      // add the options to /etc/modules.conf if the user Finish the installation
		      // -> ScannerWrite
		      
		      // Add vendor and device to scanner info
		      if ( lookup(device, "device", "") != "" )
		      {
			  SetCurrentScannerValue( "device", lookup(device, "device", "") );
		      }
		      else
		      {
			  SetCurrentScannerValue( "device", CutBlanks(lookup(device, "sub_device", "")) );
		      }
		      if ( lookup(device, "vendor", "") != "" )
		      {
			  SetCurrentScannerValue( "vendor", lookup(device, "vendor", "") );
		      }
		      else
		      {
			  SetCurrentScannerValue( "vendor", CutBlanks(lookup(device, "sub_vendor", "")) ); 
		      }
		      if ( ret == `load )
		      {
			  // text of a notify popup: the loading was successful
			  UI(`NotifyPopup(_("The USB module is loaded successfully.
You may proceed by clicking Next.")));
		      }
		  }  
	      }
	  }
      }

      return ret;
      
  }

}
