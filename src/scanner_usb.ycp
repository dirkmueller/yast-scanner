/**
 * File:
 *   scanner_usb.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *
 * This dialog is called only if the USB scanner is not detected by hw-library.
 * 'sane' also doesn't know these scanners (the IDs are not contained in
 * /etc/hotplug/usb/sane-hardcoded.usermap).  
 * Therefore the USB IDs must be added to /etc/sane.d/<driver>.conf and
 * /etc/hotplug/usb/sane.usermap.
 * From version 9.1 (kernel 2.6) on the kernel module scanner (or microtek) is obsolete.
 * Scanning is done with libusb only. The /etc/sane.d/<driver>.conf files
 * must contain the USB IDs of supported scanners.
 *
 * Remark: Up to version 9.0 (kernel 2.4) the kernel module scanner must be loaded with:
 * 	   modprobe <module name> ID ID
 * 	   The options must be added to /etc/modules.conf.
 * 
 * Remark: Up to verion 7.2 the USB manager had an own, manually created config file
 *         /etc/usbmgr/usbmgr.conf which is obsleted by the hotplug script now.
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 *
 * $Id$
 *
 *
 */

{
  textdomain "scanner";

  import "Label";
  import "String";
  import "Scanner";

  import "Wizard";
  import "Popup";

  define term ScannerUSBDialog_UI( list device_list ) ``{

      term layout = `Empty();

      layout = `VBox(`VSpacing(1.0),
// This is a label, i.e. the line length should not exceed 50 characters.
		     `Label(`opt (`hstretch), _("The scanner cannot be configured automatically.

Select your scanner from the list below.
")),
		      `VSpacing(0.3),
		      `HBox( `HWeight(6, `SelectionBox(`id(`sel_usb),
						     // label for a list of USB devices
						     _("&USB devices"),
						     device_list )),
			     `HWeight(1, `Empty())
			     ),
		      `VSpacing(1.0)
		      );
      return layout;
  }

/**
 * ScannerStartDialog
 */
  define symbol ScannerUSBDialog()``{
      string help = "";

      // help part 1 of dialog manual USB Scanner configuration
      string help1_unused    = _("<p>Please enter the product (model) ID,
the vendor ID and the USB module name (usually 'scanner')
and press the <b>Load</b> button.</p>");

      // help part 2 of dialog manual USB Scanner configuration
      // Translators: Please DO NOT translate 'Vendor:' and 'Model:'!
      string help2_unused    = _("<p>The information on the IDs can be obtained
by issuing the command <b>hwinfo --usb</b> (look for the '<i>Vendor:</i>'
and '<i>Model:</i>' entries and take the digits in front, such as 010c).
</p> ");

      // help part 1 of dialog manual USB Scanner configuration
      string help1    = _("<p>YaST2 shows a list of USB devices which are not
clearly identified. If you find your scanner,
please select the corresponding list entry.</p>");

      // help part 2 of dialog manual USB Scanner configuration
      string help2    = _("<p>Proceed to 
manual scanner selection by clicking <b>Next</b>.</p>");

      // help part 3
      string help3    = _("<p>Attention: Manual configuration of an unknown USB scanner is for experts only.
Make sure that the data entered in next dialog is correct.</p>");
      help = help1 + help2 + help3;

      // get a list of USB devices
      list<map> usb_devices = (list<map>) SCR::Read(.probe.usb);
      foreach (map device, usb_devices, ``{ y2milestone( "found USB device: %1", device ); } );

      map usb_unknown = $[];
      list usb_selbox = [];

      /*
       * SCR::Read(.probe.usb)
       * ----------------------------
       * [$["bus":"USB",
       * "class_id":268,
       * "device":"Perfection 640",
       * "device_id":196876,
       * "drivers":[$["active":true,"modprobe":true, "modules":$["scanner":""]]],
       * "resource":$["baud":[$["speed":1500000]]],
       * "rev":"0.01",
       * "sub_class_id":0,
       * "sub_device":"Perfection640  ",
       * "sub_vendor":"EPSON",
       * "unique_key":"ldbq.9Hr5DGWrbRF",
       * "vendor":"Epson",
       * "vendor_id":197816]]
       *
       * The result map does NOT contain a "drivers" entry if the device is unknown.
       */

      if ( lookup (Scanner::user_settings, "test_mode", false ) )
      {
	  usb_devices = [
			 $["bus":"USB", "class_id":268, "device":"Perfection 640",
			   "device_id":196876,
			   "drivers":[$["active":true,"modprobe":true, "modules":$["scanner":""]]],
			   "resource":$["baud":[$["speed":1500000]]],
			   "rev":"0.01", "sub_class_id":0, "sub_device":"Perfection640  ", "sub_vendor":"EPSON",
			   "unique_key":"ldbq.9Hr5DGWrbRF", "vendor":"Epson", "vendor_id":197816],
			 $["bus":"USB", "class_id":0, "device_id":213171, "hotplug":"usb",
			   "model":"Microtek Unclassified device", "old_unique_key":"WbLO.WQVSSXduHiC",
			   "resource":$["baud":[$["speed":1500000]]], "sub_class_id":0,
			   "unique_key":"B3Fu.WQVSSXduHiC", "vendor":"Microtek", "vendor_id":198106],
			 $["bus":"USB", "class_id":266, "device":"USB UHCI Root Hub", "hotplug":"usb",
			   "model":"USB UHCI Root Hub", "old_unique_key":"Xfjy.mJyjyEydu_4",
			   "resource":$["baud":[$["speed":1500000]]], "sub_class_id":0,
			   "unique_key":"B3Fu.mJyjyEydu_4"],
			 $["bus":"USB", "class_id":268, "device":"Perfection 649",
			   "device_id":196876,
			   "resource":$["baud":[$["speed":1500000]]],
			   "rev":"0.01", "sub_class_id":0, "sub_device":"Perfection640  ", "sub_vendor":"EPSON",
			   "unique_key":"ldbq.9Hr5DGWrbRF", "vendor":"Epson", "vendor_id":197816]  ];
      }

      integer no = 1;
      string list_entry = "";

      // get all unknown USB devices
      foreach (map device, usb_devices, ``{
	  if ( lookup( device, "bus", "" ) == "USB"             // show only USB devices
               && ( lookup( device, "driver", "" ) == ""        // if driver unknown (scanner?)
                    || lookup( device, "class_id", 0 ) == 268   // or if scanner
                    || lookup( device, "class_id", 0 ) == 265 ) // or if printer (all-in-one?)
	       && lookup( device, "class_id", 0 ) != 266 )      // and don't show hubs
	  {
	      usb_unknown = add( usb_unknown, no, device );
	      string device_str = lookup( device, "device", "");
	      if ( device_str == "" )
	      {
		  device_str = lookup( device, "sub_device", "");
	      }
	      if ( device_str == "" )
	      {
		  device_str = lookup( device, "model", "");
	      }
	      
	      string vendor_str = lookup( device, "vendor", "");
	      if ( vendor_str == "" )
	      {
		  vendor_str = lookup( device, "sub_vendor", "");
	      }
	      if ( vendor_str != "" || device_str != "" )
	      {
		  list_entry = sformat( "%1 - %2", vendor_str, device_str );
		  usb_selbox = add( usb_selbox, `item(`id(no), list_entry ));
		  no = no+1;
	      }
	  }
      } );

      // title of the dialog manual USB configuration
      string caption = _("Manual USB scanner configuration for Experts");
      term contents  = ScannerUSBDialog_UI( usb_selbox );

      Wizard::SetContentsButtons(caption,contents,help,Label::BackButton(),Label::NextButton());

      any ret = nil;
      boolean go_on = true;

      // main

      while ( go_on )
      {
	  go_on = true;

	  ret = UI::UserInput();

	  if ( ret == `next || ret == `abort || ret == `back || ret == `cancel )
	  {
	      go_on = false;
	  }
	  if ( ret == `next )
	  {
	      any usb_device = UI::QueryWidget(`id(`sel_usb), `CurrentItem);

	      if ( usb_device == nil )
	      {
		  // text of a notify popup
		  Popup::Notify(_("Please select a scanner from the list."));
		  go_on = true;
	      }
	      else
	      {
		  map device 	= lookup( usb_unknown, usb_device, $[] );
		  
		  integer vendor_id = lookup( device, "vendor_id", 0 );
		  if (vendor_id != 0 )
		  {
		      vendor_id = vendor_id - 196608;	// subtract 0x30000
		  }
		  integer product_id = lookup( device, "device_id", 0 );
		  if ( product_id != 0 )
		  {
		      product_id = product_id - 196608;	// subtract 0x30000
		  }
		  
		  string usb_usermap = sformat("%1  %2", tohexstring(vendor_id), tohexstring(product_id) );

		  if ( vendor_id != 0 && product_id != 0 )
		  {
		      Scanner::SetCurrentScannerValue("usb_options", $["vendor" : tohexstring(vendor_id),
							      "product": tohexstring(product_id)]);
		      Scanner::SetCurrentScannerValue("usb_usermap", usb_usermap );

		  }

		  // Add vendor and device to scanner info
		  if ( lookup(device, "device", "") != "" )
		  {
		      Scanner::SetCurrentScannerValue( "device", lookup(device, "device", "") );
		  }
		  else
		  {
		      Scanner::SetCurrentScannerValue( "device", String::CutBlanks(lookup(device, "sub_device", "")) );
		  }
		  if ( lookup(device, "vendor", "") != "" )
		  {
		      Scanner::SetCurrentScannerValue( "vendor", lookup(device, "vendor", "") );
		  }
		  else
		  {
		      Scanner::SetCurrentScannerValue( "vendor", String::CutBlanks(lookup(device, "sub_vendor", "")) );
		  }

                  y2milestone( "Current scanner is: %1", Scanner::GetCurrentScanner() );

	      }
	  }
      }

      return (symbol) ret;
  }

}
