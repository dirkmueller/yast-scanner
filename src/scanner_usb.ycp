/**
 * File:
 *   scanner_manual.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *
 * This dialog is called only if the USB scanner is not detected by hw-library (
 * All scanners from driver source files /usr/src/linux-<kernel-version>.SuSE/drivers/usb/
 * scanner.c or microtek.c are listed in dynamically created file /lib/modules/<kernel-version>/
 * modules.usbmap.
 * In case the scanner is known the USB module will be loaded automatically (hotplugin).
 * Otherwise the module must be loaded with: modprobe ID ID <module name>
 * The options must be added to /etc/modules.conf.    
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/31
 *
 * $Id$
 *
 * 
 */

{

  global define ScannerUSBDialog_UI() ``{

      // the available modules for USB scanner support are listed in /etc/usbmgr/usbmgr.conf
      list module_list = ["scanner", "microtek"];
      term layout = `Empty();
      // This is a label, i.e. the line length should not exceed 50 characters.
      layout = `VBox( `Label(`opt (`hstretch), _("YaST2 could not load the USB scanner
module automatically.\n
Please enter the required scanner data.")),
		      `VSpacing(0.3),
		      `HBox( `HWeight( 4, `TextEntry(`id(`model),
						     // Input field label for the product ID
						     _("&Product-ID"),
						     "" )),
			     `HWeight(1, `Empty())
			     ),
		      `HBox( `HWeight( 4, `TextEntry(`id(`vendor),
						     // Input field label for the vendor ID
						     _("&Vendor-ID"),
						     "" ) ),
			     `HWeight(1, `Empty())
			     ),
		      `VSpacing(1.0),
		      `HBox(
			    // Label for the selection box of the module
			    `Left(`ComboBox(`id(`module), `opt(`notify), _("&USB module name"),
				      module_list
				      )),
			    `VBox(
				  `VSpacing(0.3),
                                  // button label 
				  `Left(`PushButton (`id (`test), _("&Load"))),
				  `VSpacing(0.3)
				  )
			    ),
		      `VSpacing(1.0)
		      );
      return layout;
  }

/**
 * ScannerStartDialog
 */
  global define ScannerUSBDialog()``{
      string help = "";

      // help part 1 of dialog manual USB Scanner configuration
      string help1_unused    = UI(_("<p>Please enter the product (model) ID,
the vendor ID and the USB module name (usually 'scanner')
and press the <b>Load</b> button.</p>"));

      // help part 2 of dialog manual USB Scanner configuration
      // Translators: Please DO NOT translate 'Vendor:' and 'Model:'!
      string help2_unused    = UI(_("<p>The information on the IDs can be obtained
by issuing the command <b>hwinfo --usb</b> (look for the '<i>Vendor:</i>'
and '<i>Model:</i>' entries and take the digits in front, e.g. 010c).
</p> "));

      // help part 1 of dialog manual USB Scanner configuration
      string help1    = UI(_("<p>YaST2 shows a list of USB devices which are not
clearly identified. If you find your scanner,
please select the corresponding list entry.</p>"
 ));

      // help part 2 of dialog manual USB Scanner configuration
      string help2 = UI(_("Also select the USB module (usually 'scanner')
and press the <b>Load</b> button.</p>"));
      
      // help part 3 of dialog manual USB Scanner configuration
      string help3    = UI(_("<p>YaST2 will try to load the
USB kernel module.</p> "));

      // help part 4 of dialog manual USB Scanner configuration
      string help4    = UI(_("<p>If the scanner module loaded 
successfully you can proceed to the
\"Manual scanner selection\" dialog by clicking on <b>Next</b>.</p>"));

      help = help1 + help2 + help3 + help4;

      // title of the dialog manual USB configuration
      string caption = UI(_("Manual USB scanner configuration"));
      term contents  = ScannerUSBDialog_UI();

      UI(`SetWizardContentsButtons(caption,contents,help,BackButtonLabel(),NextButtonLabel()));

      any ret = nil;
      boolean load_ok = false;



      repeat {
	  ret = UI(`UserInput());

	  if ( ret == `load || ret == `next )
	  {
	      // get data and try to load the module

	      // if ( load_ok )
	      // {
	      //   popup OK -> you can go on
	      //   
	      // }
	      // else
	      //   popup ContinueCancel -> try again or abort
	  }
	  if ( ret == `next && !load_ok )
	  {
	      // popup ERROR -> you can't go on
	  }

      } until ( ret == `next || ret == `back || ret == `abort );

      return ret;
      
  }

}
