/**
 * File:
 *   scanner_scsi.ycp
 *
 * Module:
 *   Configuration scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * $Id$
 *
 * 
 * Overview SCSI devices. 
 * 
 *
 */

{

  textdomain "scanner";
  
  /**
   * ScannerSCSIDialog Layout	
   */
  
  global define ScannerSCSIDialog_UI( )``{

      term layout = `VBox (
			   // This is a label, i.e. the line lenght should not be more than 50 characters.
			   // Please also respect the newlines (\n).
			   `Left(`Label (`opt (`hstretch), _("It is necessary to know the device file before
going on with installation.\n
Please enter the device, e.g. /dev/sg0.\n"))),
			   `VSpacing (1),
			   `HBox (
				  `HWeight(4, `TextEntry(`id(`device),
							 // Input field label for device file
							 _("&SCSI device file"),
							 "" )),
				  `HWeight(1, `Empty())
				  ),
			   `VSpacing (1)
			   );


      return layout;

  };

  
/**
 * ScannerSCSIDialog	
 */
  global define ScannerSCSIDialog( )``{

      string help = "";
      
      // part 1 of helptext of dialog SCSI scanner configuration
      string help1    = UI(_("<p>Please enter the device file
used by your SCSI scanner (e.g. /dev/sg0 ).
</p>"));
      // part 2 of helptext of dialog SCSI scanner configuration
      string help2 = UI(_("<p>You can get informations about all
your SCSI devices with command <b>hwinfo --scsi</b> (call it
as user 'root').
Search the output for your scanner to get the
<i>Device File:</i>.</p>"));

      help = help1 + help2;
      
      string caption = UI(_("Manual SCSI Scanner configuration"));

      term contents  = ScannerSCSIDialog_UI( );

      UI(`SetWizardContentsButtons(caption,contents,help,BackButtonLabel(),NextButtonLabel()));

      any ret = nil;

      repeat {
	  
	  ret = UI(`UserInput());

	  if ( ret == `next )
	  {
	      string devicefile = CutBlanks( UI(`QueryWidget(`id(`device), `Value )) );

	      // Create the entry for the SCSI scanner
	      CreateScannerEntry( $["bus":"SCSI", "devicefile":devicefile] ); 
	  }
	  
      } until ( ret == `next || ret == `back || ret == `abort );
      
      return ret;
  };

}
