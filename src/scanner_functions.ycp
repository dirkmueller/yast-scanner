/**
 * File:
 *   scanner_functions.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   Input and output functions.
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/27
 *
 * $Id$
 *
 * Input and output routines.
 * 
 */

{

  textdomain "scanner";

/**
 *  ------- UNUSED ---------
 * Fill the map of all scanner settings from the SCR
 * @return map all scanner settings
 */
  global define ScannerRead() ``{
      /* TODO: your code here ... */
      return $[];
  }

/**
 * Write additional data/settings.
 * @param m a map of all scanner settings
 * @return boolean success of operation
 */
  global define ScannerWrite(map scanner_info) ``{

      foreach( `scanner, scanner_info, ``{
	  // if required write the options for the scanner kernel module to /etc/modules.conf
	  if ( lookup(scanner, "write_mod_conf", false ) )
	  {
	      // TODO get Options and module
	      SCR(`Write(.modules.options, "vendor=0x5c55 product=0x4545", "scanner" ));
	  }

      });

      return true;
  }

/**
 * Write the scanner data from SCR to the disk
 * @return list success of operation
 */
  global define ScannerFinish() ``{
      /* TODO your code here ... */
      sleep(1500);
      return true;
  }

/**
 * Get the value to the given key of the scanner currently in work.
 * @param string key
 * @return string value
 */
  global define GetCurrentScannerValue( string key ) ``{
      string value = "";
      integer current_id = lookup( user_settings, "scannerInWork", 0 );
      map scanner_info = lookup( user_settings, "scannerInfo", $[] );
    
      if ( current_id != 0 )
      {
	  value = lookup( lookup(scanner_info, current_id, $[]), key, ""); 
      }
      y2debug( "GET current value: %1", value );
      return value;
  }

 /**
 * Get the scanner data of the scanner currently in work.
 * @return map scanner info
 */
  global define GetCurrentScanner(  ) ``{
      string value = "";
      integer current_id = lookup( user_settings, "scannerInWork", 0 );
      map scanner_info = lookup( user_settings, "scannerInfo", $[] );

      if ( current_id != 0 && scanner_info != $[] )
      {
	  return ( lookup(scanner_info, current_id, $[]) );
      }
      else
      {
	  return $[];
      }
  }

/**
 * Set the key/value pair in the scanner data of the scanner currently in work.
 * @param string key
 * @param string value
 * @return boolean
 */
  global define SetCurrentScannerValue( string key, string value ) ``{
      integer current_id = lookup( user_settings, "scannerInWork", 0 );
      map scanner_info = lookup( user_settings, "scannerInfo", $[] );
      map current_scanner = lookup(scanner_info, current_id, $[]);

      if ( current_id != 0 && current_scanner != $[] )
      {
	  current_scanner = add( current_scanner, key, value );
	  scanner_info = add( scanner_info, current_id, current_scanner );
	  user_settings = add( user_settings, "scannerInfo", scanner_info );
	  return true;
      }
      else
      {
	  return false;
      }
  }

 /**
 * Display a popup with a list of several scanners.
 * The first list entry is preselected.
 * @param map scanner
 * @param string title of the popup
 * @return any selected item
 */
  global define DisplayScannerList( map scanners, string title ) ``{

      list table_contents =  maplist( `key, `value, scanners,
				 ``(`item(`id(key), lookup(value, "vendor", ""),lookup(value, "device", ""), lookup(value, "bus", ""))) );

      UI(`OpenDialog(`opt( `decorated),
		     `HBox(`VSpacing(15),
			   `VBox( `HSpacing(50),
				  `Left(`Heading(title)),
				  `VSpacing(1.0),
				  `Left(`Label(_("Please select a scanner from the list"))),
				  `VBox( `VWeight( 3, `Table( `id(`table), `opt(`hvstretch),
							      // This are the column headers of a list with several scanners.
							      `header( _("Vendor"), _("Model"), _("Bus") ),
							      table_contents )),
					 `VWeight( 1, `HCenter(`PushButton( `id(`ok), `opt(`default), OKButtonLabel() )
							       ))
					 )
				  )
			   )
		     )
	 );
      // select first list entry
      UI( `ChangeWidget(`id(`table), `CurrentItem, select(select(select(table_contents,0) ,0) ,0)) );
	  
      any r = UI(`UserInput());

      if ( r == `ok )
      {
	  any ret = UI(`QueryWidget( `id(`table), `CurrentItem ));
	  UI(`CloseDialog());
	  return( ret );
      }
      else
      {
	  UI(`CloseDialog());
	  return ( r );
      }
  };

/**
 * Check whether an USB scanner is already installed.
 * @return boolean already USB scanner installed or not
 */
  global define CheckUSBScanner( ) ``{
      map scanner_map = lookup( user_settings, "scannerInfo", $[] );
      boolean already_usb = false;

      if ( scanner_map != $[] )
      {
	  foreach( `scan_id, `scanner, scanner_map, ``{
	      // TODO: falls auch Konfigurationen NICHT angeschlossener Scanner
	      // berücksichtigt werden, muss hier noch der neue Status abgefragt werden
	      if ( lookup( scanner, "bus", "" ) == "USB" &&
		   lookup( scanner, "scanner_status", "" ) == "installed" )
	      {
		  already_usb = true;
	      }   
	  });
      }
      return already_usb;
  }

/**
 * Decide which dialog should be the next one.
 * @param symbol mode can be `start or `add.
 * @return symbol return value for the start dialog, e.g. `notfound
 */
  global define DecideDialog( symbol mode ) ``{

      map new_scanner = $[]; 	  //  new scanner which are supported by SANE
      map detected_scanner = $[]; //  detected scanner which are NOT supported by SANE
      symbol ret = `next;
      boolean installed = false;
      map scanner_info = lookup( user_settings, "scannerInfo", $[] );
      
      if ( scanner_info != $[] )
      {
	  foreach (`scan_id, `scanner, scanner_info, ``{
	      if ( lookup( scanner, "scanner_status", nil ) == "supported" )
	      {
		  new_scanner = add( new_scanner, scan_id, scanner);
	      }
	      else if ( lookup( scanner, "scanner_status", nil ) == "detected" )
	      {
		  detected_scanner = add( detected_scanner, scan_id, scanner);
	      }
	      else if ( lookup( scanner, "scanner_status", nil ) == "installed" )
	      {
		  installed = true;
	      }
	  });
      }
      y2debug( "SUPPORTED: %1, DETECTED: %2", new_scanner, detected_scanner );

      if ( installed && (mode != `add) )
      {
	  // if one (or more) already configured scanners is/are found go to "Scanner overview"
	  ret = `overview;
      }
      else if ( new_scanner != $[] )
      {
	  // if one (or more) new supported scanners is/are found go to "Scanner installation"
	  integer scan_id = 0;
	  if ( size(new_scanner) == 1 ) 
	  {
	      scan_id = select( maplist(`key, `value, new_scanner, ``{ return key;}), 0 );
	  }
	  else if ( size(new_scanner) > 1 )
	  {
	      string title = _("List of new supported scanners");
	      scan_id = DisplayScannerList( new_scanner, title );
	  }             
	  ret = `new;
	  user_settings = add( user_settings, "scannerInWork", scan_id );
      }
      else if ( detected_scanner != $[] )
      {
	  // if one (or more) NOT supported scanner is/are found go to "Manual Selection"
	  integer scan_id = 0;
	  if ( size(detected_scanner) == 1 ) 
	  {
	      scan_id = select( maplist(`key, `value, detected_scanner, ``{ return key;}), 0 );
	  }
	  else if ( size(detected_scanner) > 1 )
	  {
	      string title = _("List of detected scanners");
	      scan_id = DisplayScannerList( detected_scanner, title );
	  }
	  ret = `manual;
	  user_settings = add( user_settings, "scannerInWork", scan_id ); 
      }
      else
      {
	  // no scanner found at all -> go to dialog Scanner not found
	  ret = `notfound;
      }

      return ret;
  }

/**
 * Create a new scanner entry in global "scannerInfo" map and write the
 * map to the user_settings..
 * @param map new scanner
 */
  global define CreateScannerEntry( map new_entry ) ``{

      map scanner_info = lookup( user_settings, "scannerInfo", $[] );
      integer key = size(scanner_info) + 1;
      
      scanner_info = add( scanner_info, key, new_entry );
      y2debug("Scanner info added: %1", scanner_info);

      user_settings = add( user_settings, "scannerInfo", scanner_info );
      user_settings = add( user_settings, "scannerInWork", key ); 
  }
  
}
