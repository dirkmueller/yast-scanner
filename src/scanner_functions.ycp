/**
 * File:
 *   scanner_functions.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   Input and output functions.
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *   Klaas Freitag <freitag@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/27
 *
 * $Id$
 *
 * Input and output routines.
 * 
 */

{

  textdomain "scanner";

  import "Runlevel";
  import "Label";
  
/**
 *  ------- UNUSED ---------
 * Fill the map of all scanner settings from the SCR
 * @return map all scanner settings
 */
  global define ScannerRead() ``{
      /* TODO: your code here ... */
      return $[];
  }

/**
 * Write additional data/settings.
 * @param m a map of all scanner settings
 * @return boolean success of operation
 */
  global define ScannerWrite(map scanner_info) ``{
      boolean ret = true;
      
      foreach( `key, `scanner, scanner_info, ``{
	  // if required write the options for the scanner kernel module to /etc/modules.conf
	  // more than one usb scanner is not allowed, can be one usb and more scsi
	  map usb_options = lookup(scanner, "usb_options", $[] );
	  string usb_usermap = lookup( scanner, "usb_usermap", "" );
	  string usb_module  = lookup(scanner, "usb_module", "" );
	  string bus = lookup(scanner, "bus", "" );
	  string is_installed = lookup( scanner, "scanner_status", "" );
	  string unique_key =  lookup( scanner, "unique_key", "" );
	  
	  if( is_installed == "installed" )
	  {
	      boolean success = false;
	      
	      SCR::Write(.probe.status.configured, unique_key, `yes);
	      y2milestone ( "Mark scanner %1 as configured",  unique_key );
	      
	      if ( usb_module != "" && usb_options != $[] )
	      {
		  success = SCR::Write(.modules.options, usb_options , usb_module );
		  y2debug( "Write /etc/modules.conf: %1 %2", usb_options , usb_module );
		  if ( success )
		  {
		      // WRITE /etc/modules.conf now and call "depmod"
		      Write(.modules.nil);

		      // Write /etc/hotplug/usb.usermap
		      // -> scanner module will be loaded automatically
		      //    with options set in /etc/modules.conf
		      string user_entry = sformat ("%1  0x0003  %2  0x0000       0x0000       0x00         0x00            0x00            0x00            0x00            0x00            0x00000000", usb_module, usb_usermap );
		      SCR::Execute(.target.bash, sformat("echo \"%1\" >> /etc/hotplug/usb/sane.usermap", user_entry ) );
		  }
		  else
		  {
		      ret = false;
		  }
	      }
	      else if ( bus == "SCSI" )
	      {
		  // set the link in /etc/init.d/rc3.d to start the script /usr/sbin/rcsane
		  // (which sets and resets the permissions 666 on /dev/sg0 )
		  success = Runlevel::ServiceAdjust( "sane", "enable" );
		  y2milestone( "ServiceAdjust( sane, enable ) returns: %1", success );
		  if ( !success )
		      ret = false;
	      }
	      else if ( bus == "PTAL" )
	      {
		  // enable PTAL service and hotplug
		  success = Runlevel::ServiceAdjust ("hotplug_usb", "enable");
		  if ( success )
		  {
		      success = Runlevel::ServiceAdjust ("ptal", "enable");
		  }
		  if ( !success )
		      ret = false;
		  
		  y2milestone ( "PTAL service %1", success?"enabled":"NOT enabled" );
	      }
	  }
      });

      return ret;
  }

/**
 * Write the scanner data from SCR to the disk
 * @return list success of operation
 */
  global define ScannerFinish() ``{

      // TODO your code here ... */
      // e.g. Write(.modules.nil);
      return true;
  }

/**
 * Get the value to the given key of the scanner currently in work.
 * @param string key
 * @return string value
 */
  global define GetCurrentScannerValue( string key ) ``{
      string value = "";
      integer current_id = lookup( user_settings, "scannerInWork", 0 );
      map scanner_info = lookup( user_settings, "scannerInfo", $[] );
    
      if ( current_id != 0 )
      {
	  value = lookup( lookup(scanner_info, current_id, $[]), key, ""); 
      }
      y2debug( "GET current value: %1", value );
      return value;
  }

 /**
 * Get the scanner data of the scanner currently in work.
 * @return map scanner info
 */
  global define GetCurrentScanner(  ) ``{
      any value = "";
      integer current_id = lookup( user_settings, "scannerInWork", 0 );
      map scanner_info = lookup( user_settings, "scannerInfo", $[] );

      if ( current_id != 0 && scanner_info != $[] )
      {
	  return ( lookup(scanner_info, current_id, $[]) );
      }
      else
      {
	  y2debug("ERR: Can not find a current scanner !" );
	  return $[];
      }
  }

/**
 * Set the key/value pair in the scanner data of the scanner currently in work.
 * @param string key
 * @param string value
 * @return boolean
 */
  global define SetCurrentScannerValue( string key, any value ) ``{
      integer current_id = lookup( user_settings, "scannerInWork", 0 );
      map scanner_info = lookup( user_settings, "scannerInfo", $[] );
      map current_scanner = lookup(scanner_info, current_id, $[]);

      if ( current_id != 0 && current_scanner != $[] )
      {
	  current_scanner = add( current_scanner, key, value );
	  scanner_info = add( scanner_info, current_id, current_scanner );
	  user_settings = add( user_settings, "scannerInfo", scanner_info );
	  return true;
      }
      else
      {
	  return false;
      }
  }

 /**
 * Display a popup with a list of several scanners.
 * The first list entry is preselected.
 * @param map scanner
 * @param string title of the popup
 * @return any selected item
 */
  global define DisplayScannerList( map scanners, string title ) ``{

      list table_contents =  maplist( `key, `value, scanners,
				 ``(`item(`id(key), lookup(value, "vendor", ""),lookup(value, "device", ""), lookup(value, "bus", ""))) );

      UI::OpenDialog(`opt( `decorated),
		     `HBox(`VSpacing(15),
			   `VBox( `HSpacing(50),
				  `Left(`Heading(title)),
				  `VSpacing(1.0),
				  // popup text
				  `Left(`Label(_("Please select a scanner from the list"))),
				  `VBox( `VWeight( 3, `Table( `id(`table), `opt(`hvstretch),
							      // This are the column headers of a list with several scanners.
							      `header( _("Vendor"), _("Model"), _("Bus") ),
							      table_contents )),
					 `VWeight( 1, `HCenter(`PushButton( `id(`ok), `opt(`default), Label::OKButton() )
							       ))
					 )
				  )
			   )
		     );
      // select first list entry
      UI::ChangeWidget(`id(`table), `CurrentItem, select(select(select(table_contents,0,`item()) ,0,`id()) ,0, 1));
	  
      any r = UI::UserInput();

      if ( r == `ok )
      {
	  any ret = UI::QueryWidget( `id(`table), `CurrentItem );
	  UI::CloseDialog();
	  return( ret );
      }
      else
      {
	  UI::CloseDialog();
	  return ( r );
      }
  };

  /**
   * Check whether the package hp-officeJet is installed
   *
   * @return boolean package installed correctly or not 
   */
  global define CheckOfficeJet() ``{
      // check whether the package hp-officeJet is installed
      integer exitcode = SCR::Execute (.target.bash, "/bin/rpm -q hp-officeJet");

      if ( exitcode != 0 )
      {
	  // popup text: install the package Yes/No?
	  string mesg = _("The installation of an HP all-in-one device
requires the package hp-officeJet.

Install the package now?
");
	  list packs_to_install = ["hp-officeJet"];

	  boolean cont = Popup::YesNo(mesg);

	  if ( cont )
	  {
	      WFM::CallFunction (`sw_single (packs_to_install));
	  }
      }

      // hp-officeJet is mandatory - must be installed
      exitcode = SCR::Execute (.target.bash, "/bin/rpm -q hp-officeJet");

      if ( exitcode != 0 )
      {
	  // Text of an error popup.
	  // translators: Please do not translate 'SANE'! - (it's a package name)
	  Popup::Error(_("The package 'hp-officeJet' is not installed correctly.
This package is mandatory for the installation of an HP all-in-one device.
Make sure you have the SuSE CD set available
and restart the scanner installation.  Alternatively, install the package
with the YaST2 module 'Install/Remove Software'.
"));
	  return false;
      }
      return true;
  }

  
/**
 * Check whether an USB scanner is already installed.
 * @return boolean already USB scanner installed or not
 */
  global define CheckUSBScanner( ) ``{
      map scanner_map = lookup( user_settings, "scannerInfo", $[] );
      boolean already_usb = false;

      if ( scanner_map != $[] )
      {
	  foreach( `scan_id, `scanner, scanner_map, ``{
	      // TODO: falls auch Konfigurationen NICHT angeschlossener Scanner
	      // berücksichtigt werden, muss hier noch der neue Status abgefragt werden
	      if ( lookup( scanner, "bus", "" ) == "USB" &&
		   lookup( scanner, "scanner_status", "" ) == "installed" )
	      {
		  already_usb = true;
	      }   
	  });
      }
      return already_usb;
  }

/**
 * Decide which dialog should be the next one.
 * @param symbol mode can be `start or `add.
 * @return symbol return value for the start dialog, e.g. `notfound
 */
  global define DecideDialog( symbol mode ) ``{

      map new_scanner = $[]; 	  //  new scanner which are supported by SANE
      map detected_scanner = $[]; //  detected scanner which are NOT supported by SANE
      symbol ret = `next;
      boolean installed = false;
      map scanner_info = lookup( user_settings, "scannerInfo", $[] );
      
      if ( scanner_info != $[] )
      {
	  foreach (`scan_id, `scanner, scanner_info, ``{
	      if ( lookup( scanner, "scanner_status", nil ) == "supported" )
	      {
		  new_scanner = add( new_scanner, scan_id, scanner);
	      }
	      else if ( lookup( scanner, "scanner_status", nil ) == "detected" )
	      {
		  detected_scanner = add( detected_scanner, scan_id, scanner);
	      }
	      else if ( lookup( scanner, "scanner_status", nil ) == "installed" )
	      {
		  installed = true;
	      }
	  });
      }
      y2debug( "SUPPORTED: %1, DETECTED: %2", new_scanner, detected_scanner );

      if ( installed && (mode != `add) )
      {
	  // if one (or more) already configured scanners is/are found go to "Scanner overview"
	  ret = `overview;
      }
      else if ( new_scanner != $[] )
      {
	  // if one (or more) new supported scanners is/are found go to "Scanner installation"
	  integer scan_id = 0;
	  if ( size(new_scanner) == 1 ) 
	  {
	      scan_id = select( maplist(`key, `value, new_scanner, ``{ return key;}), 0, 0 );
	  }
	  else if ( size(new_scanner) > 1 )
	  {
	      // text of a popup showing new supported scanners
	      string title = _("List of new supported scanners");
	      scan_id = DisplayScannerList( new_scanner, title );
	  }             
	  ret = `new;
	  user_settings = add( user_settings, "scannerInWork", scan_id );
      }
      else if ( detected_scanner != $[] )
      {
	  // if one (or more) NOT supported scanner is/are found go to "Manual Selection"
	  integer scan_id = 0;
	  if ( size(detected_scanner) == 1 ) 
	  {
	      scan_id = select( maplist(`key, `value, detected_scanner, ``{ return key;}), 0, 0 );
	  }
	  else if ( size(detected_scanner) > 1 )
	  {
	      // text of a popup showing the detected scanners
	      string title = _("List of detected scanners");
	      scan_id = DisplayScannerList( detected_scanner, title );
	  }
	  ret = `manual;
	  user_settings = add( user_settings, "scannerInWork", scan_id ); 
      }
      else
      {
	  // no scanner found at all -> go to dialog Scanner not found
	  ret = `notfound;
      }

      return ret;
  }

/**
 * Create a new scanner entry in global "scannerInfo" map and write the
 * map to the user_settings..
 * @param map new scanner
 */
  global define CreateScannerEntry( map new_entry ) ``{

      map scanner_info = lookup( user_settings, "scannerInfo", $[] );
      integer key = size(scanner_info) + 1;
      
      scanner_info = add( scanner_info, key, new_entry );
      y2debug("Scanner info added: %1 with key %2", scanner_info, key);

      user_settings = add( user_settings, "scannerInfo", scanner_info );
      user_settings = add( user_settings, "scannerInWork", key ); 
  }
  

/**
 * - Delete scanner from global "scannerInfo" map and lower the id's
 *   of all scanners after the deleted one
 * - call ag_sane to remove driver from /etc/sane.d/dll.conf
 * @param scanner id to be deleted
 */

  global define DeleteScannerEntry (integer delete_id) ``{

    y2debug("Scanner to be deleted: %1", delete_id);
    if (delete_id == 0) return;
    
//      integer current_id = lookup( user_settings, "scannerInWork", 0 );
    map oldscanner_info = lookup( user_settings, "scannerInfo", $[] );
    map newscanner_info = $[];
    map deleted_entry = $[];

//    SCR::Write(.dumpto.tmp.oldscanner_info, oldscanner_info );

    //walk through all scanner entries
    foreach (`id,`entrymap,oldscanner_info,
      ``{
	// delete it
	if ( id == delete_id )
	{
	  deleted_entry = entrymap;
	  return;
	}
	// this one is after the deleted entry, so lower its id
	else if(id>delete_id)
	{
	  change(newscanner_info,id-1,entrymap);
	}
	// copy all entries before the deleted one
	else
	{
	  change(newscanner_info,id,entrymap);
	}
      });

    string driver=lookup(deleted_entry,"scanner_driver","");
    boolean ok = SCR::Execute(.sane.removeDriver, add(deleted_entry, "driver", driver));
    if(!ok)
    {
      //TRANSLATOR: %1 stands for the driver name
      Popup::Message(sformat(_("It was not possible to deactive the driver %1"), driver));
    }

//    SCR::Write(.dumpto.tmp.newscanner_info, newscanner_info );

    user_settings = add( user_settings, "scannerInfo", newscanner_info ); 
    user_settings = add( user_settings, "scannerInWork", 0 ); 
  }
}
