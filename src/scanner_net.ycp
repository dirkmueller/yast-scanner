/**
 * File:
 *   scanner_manual.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *   Klaas Freitag <freitag@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/28
 *
 * $Id$
 *
 * 
 * Manual scanner detection. 
 * 
 *
 */

{

  textdomain "scanner";
  
  global define ScannerNetDialog_UI() ``{
      term layout = `VBox (
			   // This is a label, i.e. the line length should not exceed 50 characters.
			   `Left(`Label (`opt (`hstretch), _("If you want to use a scanner from a network scan
station, you must supply the IP address or hostname
of the scan station.\n
Please enter the requested information.\n"))),
			   `VSpacing (1),
			   `HBox (
				  `HWeight(4, `TextEntry(`id(`host),
							 // Input field label for ip address or hostname
							 _("&IP address or hostname"),
							 "" )),
				  `HWeight(1, `Empty())
				  ),
			   `VSpacing (1)
			   );
      
      return layout;
  }

/**
 * ScannerStartDialog
 */
  global define ScannerNetDialog()``{
      string help = "";
      string help1    = UI(_("<p>It is possible to use a scanner which
is connected to a different computer, if the computer is configured as network scan station.</p> "));
      string help2    = UI(_("<p>Enter the IP address or hostname
of that computer and click on <b>Next</b>.
</p>") );
      string help3    = UI(_("<p>More information on setting up network scan stations
can be found in the SuSE support database.</p>") );
      help = help1 + help2 + help3;
      
      string caption = UI(_("Network scan station client"));
      term contents  = ScannerNetDialog_UI();

      UI(`SetWizardContentsButtons(caption,contents,help,BackButtonLabel(),NextButtonLabel()));

      any ret = nil;

      repeat {
	  
	  ret = UI(`UserInput());

	  if ( ret == `next )
	  {
	      string host = CutBlanks( UI(`QueryWidget(`id(`host), `Value )) );

	      list net_scanner = SCR(`Read(.sane.netscannerinfo, $["bus":"Net", "host":host] ) );
	      map new_net_scanner = $[];
	      
	      if ( net_scanner != [] )
	      {
		  string devices = "";
		  string vendors = "";

		  boolean do_comma = false;
		  
		  foreach( `one_scanner, net_scanner, ``{
		      if( do_comma == true )
		      {
			  new_net_scanner = change( new_net_scanner, "device",
						    lookup( new_net_scanner, "device", "" )+", "+
						    lookup( one_scanner, "device", "" ) );
			  new_net_scanner = change( new_net_scanner, "vendor",
						    lookup( new_net_scanner, "vendor", "" )+", "+
						    lookup( one_scanner, "vendor", "" ) );
		      }
		      else
		      {
			  new_net_scanner = add( one_scanner, "scanner_status", "installed" );
			  do_comma = true;
		      }
		  });
		  y2milestone("Net Scanner: %1", net_scanner );
		  
		  // Create the entry for the Network scanner
		  CreateScannerEntry( new_net_scanner );
	      }
	      else
	      {
		  y2milestone( "NO network scanner available." );
		  any r = UI(`ContinueCancelPopup(sformat("No network scanner found on host %1", host)));
		  if ( r )
		  {
		      ret = `again;
		  }
		  else
		  {
		      ret = `abort;
		  }
	      }
	  }
	  
      } until ( ret == `next || ret == `back || ret == `abort );
      
      return ret;
	      
  }

}
