/**
 * File:
 *   scanner_start.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *   Klaas Freitag <freitag@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/28
 *
 *
 * $Id$
 *
 * 0. is package "sane" installed?
 *    if NOT -> call sw_single
 * 1. Hardware probing
 *     SCR(.probe.scanner) 	-> hwinfo --scanner
 * 2. Check already installed scanner (perl script)
 * 3. Decide whether the detected scanner(s) is (are) installed/supported by SANE
 * 4. Decide which dialog is called next
 *
 * Shows the progress of hardware probing and scanner checking.
 *
 */

{
  textdomain "scanner";

  import "Progress";
  import "Label";
  import "String";

/**
 * ScannerStartDialog
 */
  global define any ScannerStartDialog( )``{

      any ret = nil;
      boolean test_mode = lookup( user_settings, "test_mode", false );

      // Help text for start dialog (checking and probing)
      string help_text = _("<p>YaST2 is doing some checks, such as the
hardware probing of 'USB' or 'SCSI' ports.
</p>
");

      Progress::New(
		    // Headline for start dialog of scanner configuration
		    _("Initializing scanner module ..."),
		    "",	// progress_title
		    3,	// length
		    [
		     // 3 steps of probing soft- and hardware
		     // Translators: Please do not translate 'SANE'!
		     _("Checking whether SANE library is installed..."),
		     _("Probing hardware - looking for connected scanners..."),
		     _("Checking already installed scanners...")
		    ],
		    [],		// descriptions
		    help_text );

      Progress::NextStage( );
      // text for a progress bar label (please do not translate 'SANE')
      Progress::Title( _("Checking SANE library...") );

      if ( !test_mode )
      {
	  integer sane_installed = (integer) SCR::Execute (.target.bash, "/bin/rpm -q sane");
	  // check whether 'sane' is installed
	  y2debug( "SANE is installed: %1", sane_installed );
	  list packs_to_install = [];
	  string mesg = "";

	  // ( we do not need ImageMagick any longer )

	  if( sane_installed != 0 )
	  {
	      // Translators: 'SANE' is a package name - don't translate!
	      mesg = _("For scanner access under Linux, the SANE library is required (package sane).
The program 'Kooka' provides a user friendly interface for scanning
(package kde3graphics-scan). 

Install the packages now?\n");
	      packs_to_install = ["sane", "kdegraphics3-scan" ];

	      boolean cont = Popup::YesNo(mesg);

	      if ( cont )
	      {
		  WFM::CallFunction ("sw_single", [packs_to_install]);
	      }
	      else
	      {
		  // return `cancel;
	      }
	  }

	  // SANE should be installed by now - if not inform the user and exit
	  if ( SCR::Execute (.target.bash, "/bin/rpm -q sane") != 0 )
	  {
              // Translators: Please do not translate 'SANE'! (it's a package name)
	      Popup::Error(_("The package 'SANE' is not installed correctly.
This package is mandatory for the scanner installation.
Please make sure that you have the SuSE CD set available
and restart the scanner installation - or install the package
with the YaST2 module 'Install and Remove Software'.\n"));
	      return `cancel;
	  }
      }

      Progress::NextStage();
      // text for a progress bar label
      Progress::Title( _("Probing hardware") );

      integer usb_count = 0;
      list<map> connected_scanner = [];

      if ( !test_mode )
      {
	  // pobe USB and SCSI ports; command is hwinfo --scanner
	  connected_scanner = (list<map>) SCR::Read(.probe.scanner);
	  list scanner_list = [];

	  foreach (map scanner, connected_scanner, ``{
	      if ( lookup( scanner, "bus", "" ) == "USB" )
	      {
		  // sub_class_id 1 means a HP all-in-one device
		  if ( lookup( scanner, "sub_class_id", 0) == 1 )
		  {
		      boolean installed = CheckOfficeJet();
		      if ( installed )
		      {
			   // call ptal-init setup
			  integer exitcode = (integer) SCR::Execute (.target.bash, "ptal-init setup-usb 2>&1 > /dev/null" );
			  // replace scanner entry
			  list<map> ptal_devices = (list<map>) SCR::Read(.scanner.ptal);
			  foreach (map device, ptal_devices, ``{
			      if ( lookup( device, "device", "") == lookup( scanner, "sub_device", "" ) )
			      {
				  y2milestone ("PTAL device found: %1", device );
				  scanner_list = add(scanner_list, device);
			      }
			  });
		      }
		  }
		  else
		  {
		      usb_count = usb_count + 1;
		      scanner_list = add(scanner_list, scanner);
		  }
	      }
	      else
	      {
		  scanner_list = add(scanner_list, scanner);
	      }
	  });
	  connected_scanner = (list<map>)scanner_list;

	  if ( usb_count > 1 )
	  {
	      // only one USB scanner is supported by scanner library SANE
	      // and there are problems with hot plugin (changing device numbers)
	      // -> only *one* USB scanner is allowed

	      // text of an error popup "only one USB scanner allowed"
	      Popup::Error(_("YaST2 has detected several USB scanners connected to
your computer. At the moment only one USB scanner can
be configured, so please decide which one you want.\n
Disconnect all unwanted USB scanners and restart
the scanner configuration\n."));
	      return `cancel;
	  }

	  // add device name /dev/usbscanner in USB scanner map
	  connected_scanner =  maplist (map scanner, connected_scanner,
	  ``{
	      if ( lookup( scanner, "bus", "" ) == "USB" )
	      {
		  scanner = add( scanner, "dev_name", "/dev/usbscanner" );
	      }
	      return scanner;
	  });

	  y2milestone( "Connected Scanner: %1", connected_scanner);

          // add net scanner/call SCR::Read(.scanner.net) -> see below

      }
      else
      {
	  connected_scanner = lookup( user_settings, "test_connected", [] );
      }

      Progress::NextStage( );
      // text for a progress bar label
      Progress::Title(_("Checking already installed scanners"));

      list<map> installed_scanner = [];
      if ( !test_mode )
      {
	  installed_scanner = (list<map>) SCR::Read(.scanner.configured);
	  y2debug("Configured scanner: %1", installed_scanner );
      }
      else
      {
	  installed_scanner = lookup( user_settings, "test_installed", [] );
      }

      Progress::NextStep();
      // text for a progress bar label
      Progress::Title( _("Finishing the check procedure") );
      sleep(300);

      // find out which scanner is already installed / which is new / which is supported
      map scanner_info = $[];

      integer no = 1;

      foreach(map scanner, connected_scanner, ``{
	  string driver = "";
	  boolean found = false;
	  integer m = 0;
	  map scan = $[];

	  if ( !test_mode )
	  {
	      // try to get SANE scanner driver
	      driver = (string) SCR::Read(.sane.driver, scanner);
	  }
	  else
	  {
	      // get test data
 	      driver = lookup( scanner, "scanner_driver", "" );
	  }
	  //determine whether scanner is already installed
	  while ( !found && m < size(installed_scanner) )
	  {
	      scan = select( installed_scanner, m, $[] );
	      if ( ( tolower(lookup( scan, "vendor", "")) 	== tolower(lookup( scanner, "vendor", "")) ) 	&&
		   ( ( tolower(lookup( scan, "device", "")) 	== tolower(lookup( scanner, "device", "")) ) ||
		     ( tolower(String::CutBlanks(lookup( scan, "sub_device", ""))) == tolower(String::CutBlanks(lookup( scanner, "sub_device", ""))) ) )  &&
		   ( tolower(lookup( scan, "bus", "")) 		== tolower(lookup( scanner, "bus", "")) ) 	&&
		   ( tolower(lookup( scan, "dev_name", "")) 	== tolower(lookup( scanner, "dev_name", "")) ) )
	      {
		  scanner = add( scanner, "scanner_status", "installed" );
		  if(driver != "")
		  {
		    scanner = add( scanner, "scanner_driver", driver );
		  }
		  found = true;
	      }
	      m = m+1;
	  }

	  // scanner ist not installed
	  if (!found )
	  {
	      // scanner is supported if driver is available
	      if ( driver != "" )
	      {
		  scanner = add( scanner, "scanner_status", "supported" );
		  scanner = add( scanner, "scanner_driver", driver );
	      }
	      else
	      {
		  scanner = add( scanner, "scanner_status", "detected" );
	      }

	  }
	  // if the "device" or "vendor" entry is missing add the entry (set value of sub_....)
	  if ( lookup( scanner, "device", "") == "" )
	  {
	      scanner = add(scanner, "device", String::CutBlanks(lookup( scanner, "sub_device", "")) );
	  }
	  if ( lookup( scanner, "vendor", "") == "" )
	  {
	      scanner = add(scanner, "vendor", String::CutBlanks(lookup( scanner, "sub_vendor", "")) );
	  }
	  scanner_info = add(scanner_info, no, scanner);

	  no = no+1;
      });

      // Net scanner handling
      // The problem is, that one netstation can offer more than one scanner, but we
      // can only handle stations, but not entire scanner on stations. But that's the
      // way the SCR(Read(.scanner.net)) offers the net scanner list.
      // Thus we have to sort out and count scanners per station.

      // Get all scanners on the stations
      list<map> net_scanner = (list<map>) SCR::Read(.scanner.net);
      list net_stations = [];
      foreach(map one_scanner, net_scanner, ``{

	  // search for the host.
	  string host = lookup( one_scanner, "host", "" );
	  if ( host != "" )
	  {
	      // start not believing that the one is already in the known stations list.
	      boolean found = false;
	      foreach(map station, net_stations, ``{
		  string station_name = lookup( station, "host", "notfound" );

		  // Check if the host is already known
		  if( station_name == host )
		  {
		      // ok, the host is already known, just add the device.
		      found = true;
		  }
	      });

	      string dev = lookup( one_scanner, "device", "" );
	      string vend = lookup( one_scanner, "vendor", "" );
	      if( found == true )
	      {
		  list dummy = [];
		  foreach(map station, net_stations, ``{
		      string station_name = lookup( station, "host", "notfound" );
		      if( station_name == host )
		      {
			  // ok, the host is already known, just add the device.
			  station = add( station, "count", lookup( station, "count", 0 ) +1 );
			  station = add( station, "device", lookup( station, "device", "" ) + ", " + dev );
			  station = add( station, "vendor", lookup( station, "vendor", "" ) + ", " + vend );
		      }
		      dummy = add( dummy, station );
		  });
		  net_stations = dummy;
	      }
	      else
	      {
		  net_stations = add( net_stations, $[ "host":host, "device":dev, "count":1,
						     "scanner_status":"installed", "bus":"Net",
						     "vendor":vend ] );
	      }

	  }
	  else
	  {
	      y2debug( "ERROR: Host is not defined!" );
	  }

      });

      // finishing: put the net stations to the scanner_info - list
      // no is still defined from above.
      y2milestone( "Net Scanner: %1", net_scanner );
      y2debug("Net Stations found: %1", net_stations );

      foreach( `net_station, net_stations, ``{
	  y2debug("Adding net_station to scanner_info-list as no %1", no );
	  scanner_info = add(scanner_info, no, net_station);

	  no = no+1;
      });


      // default: go next to Overview Dialog
      ret = `next;

      // write scanner data to user_settings
      user_settings = add( user_settings, "scannerInfo", scanner_info );
      y2debug( "Writing SCANNER INFO: %1", scanner_info );

      // decide which dialog comes next
      if ( !lookup( user_settings, "check_again", false ))
      {
	  ret = DecideDialog( `start );
      }
      else
      {
	  ret = DecideDialog( `add );
      }

      return ret;
  }

}
