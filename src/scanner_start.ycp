/**
 * File:
 *   scanner_start.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * $Id$
 *
 * 0. is package "sane" installed?
 *    if NOT -> call sw_single
 * 1. Hardware probing
 *    1a) USB: SCR(.probe.scanner)	
 *    1b) SCSI: sane-find-scanner
 * 2. Check already installed scanner (perl script)
 * 3. Decide whether the detected scanner(s) is (are) installed/supported by SANE
 * 4. Decide which dialog is called next
 * 
 * Shows the progress of hardware probing and scanner checking. 
 *
 */

{
  textdomain "scanner";
  include "ui/progress.ycp";


/**
 * ScannerStartDialog
 */
  global define ScannerStartDialog( )``{

      any ret = nil;
      boolean test_mode = lookup( user_settings, "test_mode", false );

      
      // Help text for last dialog of base installation
      string help_text = UI(_("<p>YaST2 starts the hardware probing,
i.e. checks the 'USB' and/or the 'SCSI' port(s) for connected scanner(s).
If a new scanner is detected the next dialog allows you to
configure the scanner easily.
If the automatic detection fails you have the possibility to continue
with manual installation in following dialogs.
</p>"));
	

      UI(`ProgressSetupUI(
			  // Headline for start dialog of scanner configuration
			  _("Initialising scanner module ..."),
			  "",	// progress_title
			  1000,	// length
			  [
			   _("Checking whether SANE library is installed"),
			   _("Hardware probing - looking for connected scanner(s)"),
			   _("Checking for already installed scanner")
			  ],
			  help_text )
	 );

      UI(`ProgressMilestoneUI( 100, _("Checking for SANE"), 0 ));
      sleep(1000);
    
      if ( !test_mode )
      {
	  // check whether 'sane' is installed
	  if ( SCR (`Execute (.target.bash, "/bin/rpm -q sane")) != 0 )
	  {
	      string tmpdir = SCR (`Read (.target.tmpdir));
	      string filename = tmpdir + "/sw_single_input";
	      SCR (`Write (.target.ycp, filename, $["install":["sane"], "userInput" : false ]));
	      CallFunction (`sw_single (filename));
	  }

	  // SANE should be installed by now - if not notify the user and exit
	  if ( SCR (`Execute (.target.bash, "/bin/rpm -q sane")) != 0 )
	  {
	      UI( `ErrorPopup(_("The package 'sane' is not installed correctly.
This package is mandatory for the scanner installation.
Please make sure that you have the SuSE CD set available
and start the scanner installation again - or install the package
with the YaST2 module 'Install/Remove Software'.\n")));

	      return `cancel;
	  }
      }
    
      UI(`ProgressMilestoneUI( 200, _("Hardware probing"), 1 ));
      sleep(100);

      list connected_scanner = [];
      if ( !test_mode )
      {
	  // probe USB ports
	  connected_scanner = SCR(`Read(.probe.scanner));
	  if ( size(connected_scanner) > 1 ) 
	  {
	      // only one USB scanner is supported by scanner library SANE
	      // and there are problems with hot plugin (changing device numbers)
	      // -> only *one* USB scanner is allowed

	      // text of an error popup "only one USB scanner allowed" 
	      UI(`ErrorPopup(_("YaST2 has detected several USB scanners
connected to your PC. At the moment it's only
possible to support ONE single USB scanner.\n
Please disconnect the unwanted USB scanner(s)
and restart the scanner configuration.")));
	      return `cancel;
	    
	  }
	  // check SCSI ports
	  connected_scanner = union(connected_scanner, SCR(`Read(.scanner.scsi)));
      }
      else
      {
	  connected_scanner = lookup( user_settings, "test_connected", [] );
      }
      y2debug("Connected Scanner: %1", connected_scanner);

      UI(`ProgressMilestoneUI( 300, _("Checking for already installed scanner"), 2 ));
      sleep(100);

      list installed_scanner = [];
    
      if ( !test_mode )
      {
	  installed_scanner = SCR(`Read(.scanner.configured));
	  y2debug("Configured scanner: %1", installed_scanner );
      }
      else
      {
	  installed_scanner = lookup( user_settings, "test_installed", [] );	
      }

      UI(`ProgressMilestoneUI( 1000, _("Checking for already installed scanner"), 2 ));
      sleep(500);

      // find out which scanner is already installed/which is new/which is supported
      map scanner_info = $[];
    
      integer no = 1;
      boolean new = false;
      boolean installed = false;
      boolean detected = false;

      foreach ( `scanner, connected_scanner, ``{
	  string driver = "";
	  if ( !test_mode )
	  {
	      driver = SCR(`Read(.sane.driver, scanner));
	  }
	  else
	  {
	      driver = GetCurrentScannerValue( "scanner_driver" );
	  }
	  if ( installed_scanner == [] )
	  {
	      if ( driver != "" )
	      {
		  scanner = add( scanner, "scanner_status", `supported );
		  scanner = add( scanner, "scanner_driver", driver );
	      }
	      else
	      {
		  scanner = add( scanner, "scanner_status", `detected ); 
	      }
	  }
	  else
	  {
	      foreach ( `scan, installed_scanner, ``{
		  if ( (lookup( scan, "vendor", "") == lookup( scanner, "vendor", "")) &&
		       (lookup( scan, "device", "") == lookup( scanner, "device", "")) &&
		       (lookup( scan, "bus", "") )  == lookup( scanner, "bus", "") &&
		       (lookup( scan, "devicefile", "") == lookup( scan, "devicefile", "")) )
		  {
		      scanner = add( scanner, "scanner_status", `installed );
		      installed = true;
		  }
		  else if ( driver != "" )
		  {
		      scanner = add( scanner, "scanner_status", `supported );
		  }
		  else
		  {
		      scanner = add( scanner, "scanner_status", `detected );  
		  }
	      });
	  }
	  scanner_info = add(scanner_info, no, scanner);
	  no = no+1;
      });

      foreach( `scan_id, `scanner, scanner_info, ``{
	  if ( lookup( scanner, "scanner_status", `empty ) == `supported )
	  {
	      user_settings = add( user_settings, "scannerInWork", scan_id );
	      new = true;
	  }
      });
      if ( !new )
      {
	  foreach( `scan_id, `scanner, scanner_info, ``{
	      if ( lookup( scanner, "scanner_status", `empty ) == `detected )
	      {
		  user_settings = add( user_settings, "scannerInWork", scan_id );
		  detected = true;
	      }
	  }); 
      }
      
      if ( new )
      {
	  // if a new, supported scanner is found go to dialog "New Scanner found"
	  ret = `new;
      }
      else if ( detected )
      {
	  // if a new scanner is detected but not supported by SANE go to "Select a scanner driver"
	  ret = `driver;
      }
      else if ( installed )
      {
	  // if one (or more) already configured scanner are found go to "Scanner overview"
	  ret = `overview;
      }
      else
      {
	  // no scanner found at all -> go to dialog manual configuration
	  ret = `manual;
      }

      if ( scanner_info != $[] )
      {
	  // write scanner data to user_settings
	  user_settings = add( user_settings, "scannerInfo", scanner_info );
	  y2debug( "Writing SCANNER INFO: %1", scanner_info );
      }

      return ret;
  }

}
