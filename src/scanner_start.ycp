/**
 * File:
 *   scanner_start.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *   Klaas Freitag <freitag@suse.de>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/28
 *
 *
 * $Id$
 *
 * 0. is package "sane" installed?
 *    if NOT -> call sw_single
 * 1. Hardware probing
 *    1a) USB: SCR(.probe.scanner)	
 *    1b) SCSI: sane-find-scanner
 * 2. Check already installed scanner (perl script)
 * 3. Decide whether the detected scanner(s) is (are) installed/supported by SANE
 * 4. Decide which dialog is called next
 * 
 * Shows the progress of hardware probing and scanner checking. 
 *
 */

{
  textdomain "scanner";
  include "ui/progress.ycp";


/**
 * ScannerStartDialog
 */
  global define ScannerStartDialog( )``{

      any ret = nil;
      boolean test_mode = lookup( user_settings, "test_mode", false );

      // Help text for start dialog (checking and probing)
      string help_text = UI(_("<p>YaST2 is doing some checks, e.g. the 
hardware probing of 'USB' and/or the 'SCSI' port(s).
</p>"));
	
      UI(`ProgressSetupUI(
			  // Headline for start dialog of scanner configuration
			  _("Initializing scanner module ..."),
			  "",	// progress_title
			  1000,	// length
			  [
                           // Translators: Please do not translate 'SANE'!
			   _("Checking whether SANE library is installed..."),
			   _("Probing hardware - looking for connected scanners..."),
			   _("Checking already installed scanners...")
			  ],
			  help_text )
	 );

      UI(`ProgressMilestoneUI( 100, _("Checking SANE library..."), 0 ));
      //sleep(100);
    
      if ( !test_mode )
      {
	  integer sane_installed = SCR::Execute (.target.bash, "/bin/rpm -q sane");
	  integer magic_installed = SCR::Execute (.target.bash, "/bin/rpm -q ImageMagick");
	  // check whether 'sane' is installed
	  y2debug( "SANE is installed: %1, ImageMagick is installed: %2", sane_installed, magic_installed );
	  list packs_to_install = [];
	  string mesg = "";
	  
	  if( sane_installed == 1 && magic_installed == 1)
	  {
	      // Translators: 'SANE' is a package name - don't translate!
	      mesg = _("For scanner access under Linux, the SANE library is required
and this YaST2 configuration module needs the package ImageMagick.");
	      packs_to_install = ["sane", "ImageMagick"];
	  }
	  else if ( magic_installed == 1)
	  {
	      mesg = _("For the configuration of scanners with YaST2, the package
ImageMagick is needed.");
	      packs_to_install = ["ImageMagick"];
	  }
	  else if( sane_installed == 1)
	  {
	      // Translators: 'SANE' is a package name - don't translate!
	      mesg = _("For scanner access under Linux, the SANE library is required
(Package sane).");
	      packs_to_install = ["sane"];
	  }

	  // if one of them is missing, start installation.
	  if ( sane_installed == 1 ||  magic_installed == 1 )
	  {
	      mesg = mesg + _("

Do you want to install the package(s) now ?
");

	      boolean cont = UI ( `YesNoPopup(mesg) );
	      if ( cont )
	      {
		  string tmpdir = SCR (`Read (.target.tmpdir));
		  string filename = tmpdir + "/sw_single_input";
		  SCR (`Write (.target.ycp, filename, $["install":packs_to_install, "userInput" : false ]));
		  CallFunction (`sw_single (filename));
	      }
	      else
	      {
		  // return `cancel;
	      }
	  }

	  // SANE should be installed by now - if not inform the user and exit
	  if ( SCR (`Execute (.target.bash, "/bin/rpm -q sane")) != 0 )
	  {
              // Translators: Please do not translate 'SANE'!
	      UI( `ErrorPopup(_("The package 'SANE' is not installed correctly.
This package is mandatory for the scanner installation.
Please make sure that you have the SuSE CD set available
and restart the scanner installation - or install the package
with the YaST2 module 'Install/Remove Software'.\n")));
	      return `cancel;
	  }
      }
    
      // Progress bar (1)
      UI(`ProgressMilestoneUI( 200, _("Probing hardware"), 1 ));
      //sleep(100);
      
      list connected_scanner = [];
      if ( !test_mode )
      {
	  // pobe USB ports; command is hwinfo --scanner
	  connected_scanner = SCR(`Read(.probe.scanner));
	  
	  if ( size(connected_scanner) > 1 ) 
	  {
	      // only one USB scanner is supported by scanner library SANE
	      // and there are problems with hot plugin (changing device numbers)
	      // -> only *one* USB scanner is allowed

	      // text of an error popup "only one USB scanner allowed" 
	      UI(`ErrorPopup(_("YaST2 has detected several USB scanners connected to
your computer. At the moment only one USB scanner can
be configured, so please decide which one you want.\n
Disconnect all unwanted USB scanners and restart
the scanner configuration\n.")));
	      return `cancel;
	    
	  }
	  else if ( size(connected_scanner) == 1 )
	  {
	      // add the devicefile - rebuild the list
	      map usb_scanner = select( connected_scanner, 0 );
	      connected_scanner = [];
	      usb_scanner = add( usb_scanner, "dev_name", "/dev/usbscanner" );
	      connected_scanner = add( connected_scanner, usb_scanner );
	  }
	  y2milestone( "USB Scanner: %1", connected_scanner);
          // check SCSI ports
	  list scsi_scanner = SCR(`Read(.scanner.scsi));
	  connected_scanner = union(connected_scanner, scsi_scanner);
          y2milestone( "SCSI Scanner: %1", scsi_scanner );

	  // add net scanner/call SCR(`Read(.scanner.net) -> see below

      }
      else
      {
	  connected_scanner = lookup( user_settings, "test_connected", [] );
      }

      UI(`ProgressMilestoneUI( 300, _("Checking already installed scanners"), 2 ));
      //sleep(100);

      list installed_scanner = [];
      if ( !test_mode )
      {
	  installed_scanner = SCR(`Read(.scanner.configured));
	  y2debug("Configured scanner: %1", installed_scanner );
      }
      else
      {
	  installed_scanner = lookup( user_settings, "test_installed", [] );	
      }
      
      UI(`ProgressMilestoneUI( 1000, _("Finishing the check procedure"), 2 ));
      sleep(300);

      // find out which scanner is already installed / which is new / which is supported
      map scanner_info = $[];
    
      integer no = 1;
      
      foreach( `scanner, connected_scanner, ``{
	  string driver = "";
	  boolean found = false;
	  integer m = 0;
	  map scan = $[];
	  
	  if ( !test_mode )
	  {
	      // try to get SANE scanner driver
	      driver = SCR(`Read(.sane.driver, scanner));
	  }
	  else
	  {
	      // get test data
 	      driver = lookup( scanner, "scanner_driver", "" ); 
	  }
	  //determine whether scanner is already installed
	  while ( !found && m < size(installed_scanner) )
	  {
	      scan = select( installed_scanner, m );
	      if ( ( lookup( scan, "vendor", "") 	== lookup( scanner, "vendor", "") ) 	&&
		   ( (lookup( scan, "device", "") 	== lookup( scanner, "device", "")) ||
		     (CutBlanks(lookup( scan, "sub_device", "")) == CutBlanks(lookup( scanner, "sub_device", ""))) )  &&
		   ( lookup( scan, "bus", "") 		== lookup( scanner, "bus", "") ) 	&&
		   ( lookup( scan, "dev_name", "") 	== lookup( scanner, "dev_name", "") ) )
	      {
		  scanner = add( scanner, "scanner_status", "installed" );
		  if(driver != "")
		  {
		    scanner = add( scanner, "scanner_driver", driver );
		  }
		  found = true;
	      }
	      m = m+1;
	  }

	  // scanner ist not installed
	  if (!found )
	  {
	      // scanner is supported if driver is available
	      if ( driver != "" )
	      {
		  scanner = add( scanner, "scanner_status", "supported" );
		  scanner = add( scanner, "scanner_driver", driver );
	      }
	      else
	      {
		  scanner = add( scanner, "scanner_status", "detected" );  
	      }

	  }
	  // if the "device" or "vendor" entry is missing add the entry (set value of sub_....) 
	  if ( lookup( scanner, "device", "") == "" )
	  {
	      scanner = add(scanner, "device", CutBlanks(lookup( scanner, "sub_device", "")) );
	  }
	  if ( lookup( scanner, "vendor", "") == "" )
	  {
	      scanner = add(scanner, "vendor", CutBlanks(lookup( scanner, "sub_vendor", "")) );
	  }
	  scanner_info = add(scanner_info, no, scanner);
	  
	  no = no+1;
      });

      // Net scanner handling
      // The problem is, that one netstation can offer more than one scanner, but we
      // can only handle stations, but not entire scanner on stations. But that's the
      // way the SCR(Read(.scanner.net)) offers the net scanner list.
      // Thus we have to sort out and count scanners per station.

      // Get all scanners on the stations
      list net_scanner = SCR(`Read(.scanner.net));
      list net_stations = [];
      foreach( `one_scanner, net_scanner, ``{

	  // search for the host.
	  string host = lookup( one_scanner, "host", "" );
	  if ( host != "" )
	  {
	      // start not believing that the one is already in the known stations list.
	      boolean found = false;
	      foreach( `station, net_stations, ``{
		  string station_name = lookup( station, "host", "notfound" );

		  // Check if the host is already known
		  if( station_name == host )
		  {
		      // ok, the host is already known, just add the device.
		      found = true;
		  }
	      });

	      string dev = lookup( one_scanner, "device", "" );
	      string vend = lookup( one_scanner, "vendor", "" );
	      if( found == true )
	      {	
		  list dummy = [];
		  foreach( `station, net_stations, ``{
		      string station_name = lookup( station, "host", "notfound" );
		      if( station_name == host )
		      {	
			  // ok, the host is already known, just add the device.
			  station = change( station, "count", lookup( station, "count", 0 ) +1 );
			  station = change( station, "device", lookup( station, "device", "" ) + ", " + dev );
			  station = change( station, "vendor", lookup( station, "vendor", "" ) + ", " + vend );
		      }
		      dummy = add( dummy, station );
		  });
		  net_stations = dummy;
	      }
	      else
	      {
		  net_stations = add( net_stations, $[ "host":host, "device":dev, "count":1,
						     "scanner_status":"installed", "bus":"Net",
						     "vendor":vend ] );
	      }
	      
	  }
	  else
	  {
	      y2debug( "ERROR: Host is not defined!" );
	  }	
	   
      });

      // finishing: put the net stations to the scanner_info - list
      // no is still defined from above.
      y2milestone( "Net Scanner: %1", net_scanner );
      y2debug("Net Stations found: %1", net_stations );

      foreach( `net_station, net_stations, ``{
	  y2debug("Adding net_station to scanner_info-list as no %1", no );
	  scanner_info = add(scanner_info, no, net_station);
	  
	  no = no+1;
      });

      
      // default: go next to Overview Dialog
      ret = `next;
      
      // write scanner data to user_settings
      user_settings = add( user_settings, "scannerInfo", scanner_info );
      y2debug( "Writing SCANNER INFO: %1", scanner_info );

      // decide which dialog comes next
      if ( !lookup( user_settings, "check_again", false ))
      {
	  ret = DecideDialog( `start );
      }
      else
      {
	  ret = DecideDialog( `add );
      }

      return ret;
  }

}
