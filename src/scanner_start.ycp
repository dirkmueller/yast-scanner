/**
 * File:
 *   scanner_start.ycp
 *
 * Module:
 *   Configuration of scanner
 *
 * Summary:
 *   
 *
 * Authors:
 *   Gabriele Strattner <gs@suse.de>
 *
 * $Id$
 *
 * 0. is package "sane" installed?
 *    if NOT -> call sw_single
 * 1. Hardware probing
 *    .probe.scanner / scsi (perl script)
 * 2. Check already installed scanner (perl script)
 * 3. Decide whether the detected scanner(s) is (are) installed
 * 4. Decide which dialog is called next
 *    - at least one new scanner detected/no scanner configured
 *      -> go to dialog scanner_new (show first detected scanner)
 *    - at least one new scanner detected/at least one scanner configured
 *	-> show dialog scanner_overview AND a popup
 *	   "New scanner - configuration wanted?"
 *    - nothing new, but at least one scanner configured
 *      -> show dialog scanner_overview
 *    - nothing detected at all
 *	-> go to dialog scanner_notfound
 * 
 * Shows the progress of hardware probing and scanner checking. 
 * 
 *
 */

{
  textdomain "general";
  include "ui/progress.ycp";


/**
 * ScannerStartDialog
 */
  global define ScannerStartDialog( )``{

      any ret = nil;
      list scanner_info = lookup( user_settings, "scannerInfo", []);
      boolean test_mode = lookup( user_settings, "test_mode", false );

      
   // Help text for last dialog of base installation
      string help_text = UI(_("<p>
YaST2 starts the hardware probing, i.e. checks the 'USB' and/or
the 'SCSI' port(s) for connected scanner(s).
If a new scanner is detected the next dialog allows you to
configure easily the scanner.
If the automatic detection fails you have the possibility to continue
with manual installation in following dialogs.
</p>"));
	

    UI(`ProgressSetupUI(
			// Headline for start dialog of scanner configuration
			_("Initialising scanner module ..."),
			"",	// progress_title
			1000,	// length
			[
			 _("Checking whether SANE library is installed"),
			 _("Hardware probing - looking for connected scanner(s)"),
			 _("Checking for already installed scanner")
			 ],
			help_text )
       );

    UI(`ProgressMilestoneUI( 100, _("Checking for SANE"), 0 ));
    sleep(1000);
    
    if ( !test_mode )
    {
	// check whether 'sane' is installed
	if ( SCR (`Execute (.target.bash, "/bin/rpm -q sane")) != 0 )
	{
	    string tmpdir = SCR (`Read (.target.tmpdir));
	    string filename = tmpdir + "/sw_single_input";
	    SCR (`Write (.target.ycp, filename, $["install":["sane"], "userInput" : false ]));
	    CallFunction (`sw_single (filename));
	}

	// SANE should be installed by now - if not notify the user and exit
	if ( SCR (`Execute (.target.bash, "/bin/rpm -q sane")) != 0 )
	{
	    UI( `ErrorPopup(_("Package 'sane' is not installed correctly.
This package is mandatory for the scanner installation.
Please make sure that you have the SuSE CD set available
and start scanner installation again - or install the package
with YaST2 module 'Install/Remove Software'.\n")));

	    return `cancel;
	}
    }
    
    UI(`ProgressMilestoneUI( 200, _("Hardware probing"), 1 ));
    sleep(100);

    list connected_scanner = [];
    
    if ( !test_mode )
    {
	// probe USB ports
	connected_scanner = SCR(`Read(.probe.scanner));

	// check SCSI ports
	// connected_scanner = add(connected_scanner, SCR(`Execute(.target.bash, "check_scsi" )));
	y2debug("Connected Scanner: %1", connected_scanner);
    }

    
    UI(`ProgressMilestoneUI( 300, _("Checking for already installed scanner"), 2 ));
    sleep(100);
    
    if ( !test_mode )
    {
	//map installed_scanner = SCR(`Execute(.target.bash, "check_installed" ));
    }

    UI(`ProgressMilestoneUI( 1000, _("Checking for already installed scanner"), 2 ));
    sleep(500);

    // find out which scanner is already installed/which is new
    // TEST: add "new_scanner" true to scanner map and return new

    map scan = select (connected_scanner, 0 );
    scan = add(scan, "new_scanner", true );
    scanner_info = add( scanner_info,  scan);
    ret = `new;

    
    if ( test_mode )
    {
	if ( lookup( select(scanner_info, 0), "new_scanner", false) )
	{
	    ret = `new;
	}
	else
	{
	    ret = `overview;
	}
    }

    if ( scanner_info != [] )
    {
	// write scanner data to user_settings
	user_settings = add( user_settings, "scannerInfo", scanner_info );
    }


    return ret;
  }

}
